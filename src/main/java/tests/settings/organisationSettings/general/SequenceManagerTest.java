package tests.settings.organisationSettings.general;

import com.healthgraph.SeleniumFramework.TestNG.TestBase;
import com.healthgraph.SeleniumFramework.Util.Common.Cls_Generic_Methods;
import com.healthgraph.SeleniumFramework.dataModels.Model_Patient;
import data.EHR_Data;
import data.Settings_Data;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;
import org.testng.annotations.Test;
import pages.commonElements.CommonActions;
import pages.commonElements.Page_CommonElements;
import pages.commonElements.SequenceCommonActions;
import pages.commonElements.navbar.Page_Navbar;
import pages.commonElements.newPatientRegisteration.Page_NewPatientRegisteration;
import pages.commonElements.patientAppointmentDetails.Page_PatientAppointmentDetails;
import pages.commonElements.scheduleAdmission.Page_ScheduleAdmission;
import pages.ipd.Page_IPD;
import pages.ipd.forms.preOperative.Page_AdmissionInPreOperative;
import pages.opd.Page_OPD;
import pages.settings.organisationSettings.general.Page_IDPrefix;
import pages.settings.organisationSettings.general.Page_OrganisationSetup;
import pages.settings.organisationSettings.general.Page_SequenceManager;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class SequenceManagerTest extends TestBase {

    EHR_Data oEHR_Data = new EHR_Data();
    List<String> departmentFilter = new ArrayList<>();
    List<String> counterFilter = new ArrayList<>();
    String organisationId ="",facilityCode="",RegionCode="";
    List<String> clickedRawData = new ArrayList<>();
    List<String> clickedRawDataInAddSequence = new ArrayList<>();
    String counterForExistingSequence = "";
    List<String> existingSequenceNumber = new ArrayList<>();
    List<String> updatedSequenceNumber = new ArrayList<>();

    String patientKey = Cls_Generic_Methods.getConfigValues("patientKeyUsed");
    static Model_Patient myPatient;
    int intialCounter = 0,updatedCounter = 0;
    String propertiesLevelList [] = {"Organisation","Facility","Region"};
    String departmentNameList [] = {"OPD","IPD","Optical","Pharmacy","Central Hub","OT Store","Marketing",
    "Stationery","House Keeping","Maintenance","Central"};


    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateSequenceManagerPageAndItsFilter() {
        Page_SequenceManager oPage_SequenceManager = new Page_SequenceManager(driver);


        try {
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                m_assert.assertTrue(Cls_Generic_Methods.isElementDisplayed(oPage_SequenceManager.header_manageSequenceHeader),
                        " Manage Sequence Header Displayed Correctly");
                m_assert.assertTrue(Cls_Generic_Methods.isElementDisplayed(oPage_SequenceManager.label_departmentLabel),
                        " Department Label Displayed Correctly");
                m_assert.assertTrue(Cls_Generic_Methods.isElementDisplayed(oPage_SequenceManager.label_counterLabel),
                        " Counter Label Header Displayed Correctly");
                m_assert.assertTrue(Cls_Generic_Methods.isElementDisplayed(oPage_SequenceManager.select_departmentFilter),
                        " Department Filter Displayed Correctly");
                m_assert.assertTrue(Cls_Generic_Methods.isElementDisplayed(oPage_SequenceManager.select_counterFilter),
                        " Counter Filter Displayed Correctly");
                m_assert.assertTrue(Cls_Generic_Methods.isElementDisplayed(oPage_SequenceManager.input_searchModuleInputBox),
                        " Search Module/Field/Department Input Box Displayed Correctly Displayed Correctly");

                storeSelectOption(departmentFilter, oPage_SequenceManager.select_departmentFilterOption);
                storeSelectOption(counterFilter, oPage_SequenceManager.select_counterFilterOption);

               // Validating Search Functionality

                m_assert.assertTrue(searchByInSequenceManager("Advance Payment", "Module"),
                        " Search By Module Is Working Correctly");
                m_assert.assertTrue(searchByInSequenceManager("Advance Display ID", "Module Field"),
                        " Search By Module Field Is Working Correctly");
                for (String sFilter : departmentFilter) {
                    if(!(sFilter.equalsIgnoreCase("All") || sFilter.equalsIgnoreCase("Na")))
                        m_assert.assertTrue(searchByInSequenceManager(sFilter, "Department"),
                            " Search By Department " + sFilter + " Is Working Correctly");
                }

                Cls_Generic_Methods.clearValuesInElement(oPage_SequenceManager.input_searchModuleInputBox);
                Cls_Generic_Methods.customWait();

                //Validating Sort By



               for(String sFilter : departmentFilter) {
                    m_assert.assertTrue(sortByInSequenceManager("Department", sFilter),
                            " Sort By "+sFilter+" Is Working Fine");
                }
                for(String sFilter : counterFilter) {
                    m_assert.assertTrue(sortByInSequenceManager("Counter Level", sFilter),
                            " Sort By "+sFilter+" Is Working Fine");
                }





            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateAddSequenceManagerFunctionality() {
        Page_SequenceManager oPage_SequenceManager = new Page_SequenceManager(driver);
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);


        try {
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                getRequiredFieldData("TESTING_FACILITY");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                m_assert.assertTrue(Cls_Generic_Methods.clickElement(oPage_SequenceManager.button_addSequenceButton),
                        "Add Button CLicked In Sequence");
                Cls_Generic_Methods.customWait(5);
                m_assert.assertTrue(!Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.header_editSequenceManagerHeading).isEmpty(),
                        " Add Sequence Header Displayed correctly and Template Opened");
                m_assert.assertTrue(Cls_Generic_Methods.isElementDisplayed(oPage_SequenceManager.strong_counterLevelText),
                        " Counter Level Label Displayed");
                m_assert.assertTrue(Cls_Generic_Methods.isElementDisplayed(oPage_SequenceManager.strong_moduleNameText),
                        " Module Name Label Displayed");
                m_assert.assertTrue(Cls_Generic_Methods.isElementDisplayed(oPage_SequenceManager.strong_prefixLevelText),
                        " Prefix Level Label Displayed");
                m_assert.assertTrue(Cls_Generic_Methods.isElementDisplayed(oPage_SequenceManager.strong_counterLengthText),
                        " Counter Length Label Displayed");
                m_assert.assertTrue(Cls_Generic_Methods.isElementDisplayed(oPage_SequenceManager.strong_departmentText),
                        " Department Label Displayed");
                m_assert.assertTrue(!Cls_Generic_Methods.isElementEnabled(oPage_SequenceManager.button_createButton),
                        " Create Button is Disabled");
                m_assert.assertTrue(Cls_Generic_Methods.getSelectedValue(oPage_SequenceManager.select_counterLevelDropdownInEditSequence).equalsIgnoreCase("Select Counter Level"),
                        " By Default No Counter Level Selected");

                m_assert.assertTrue(Cls_Generic_Methods.isElementEnabled(oPage_SequenceManager.button_previewButton),
                        " Preview Button is Enabled");
                m_assert.assertTrue(Cls_Generic_Methods.isElementDisplayed(oPage_CommonElements.button_closeTemplateWithoutSaving),
                        " Close Button is Displayed");
                m_assert.assertTrue(Cls_Generic_Methods.isElementDisplayed(oPage_SequenceManager.select_addSeparators),
                        " Add Separators Select Box is Displayed");
                String entityButtonName[] = {"Organisation Code","Facility Code","Region Code","Date","Year"};
                int index = 0;
                for(WebElement eEntityButton : oPage_SequenceManager.list_displayEntitiesListInEditSequence){
                    if(Cls_Generic_Methods.isElementDisplayed(eEntityButton)){
                        m_assert.assertTrue(Cls_Generic_Methods.getTextInElement(eEntityButton).equalsIgnoreCase(entityButtonName[index]),
                                "Display Entity Button Displayed Correctly as : "+entityButtonName[index]);
                        m_assert.assertTrue(!Cls_Generic_Methods.getElementAttribute(eEntityButton,"class").contains("darkblue"),
                                " By Default "+entityButtonName[index]+" is Not Selected");
                        index++;
                    }
                }

                String entityTableHeader[] = {"Sr. No.","Name","Value/Rules","Action"};
                int j = 0;
                for(WebElement eEntityButton : oPage_SequenceManager.list_sequenceCreationTableHeaderListInEditSequence){
                    if(Cls_Generic_Methods.isElementDisplayed(eEntityButton)){
                        m_assert.assertTrue(Cls_Generic_Methods.getTextInElement(eEntityButton).equalsIgnoreCase(entityTableHeader[j]),
                                "Display Entity Table Header Displayed Correctly as : "+entityTableHeader[j]);
                        j++;
                    }
                }

                m_assert.assertTrue(Cls_Generic_Methods.selectElementByVisibleText(oPage_SequenceManager.select_counterLevelDropdownInEditSequence,"Organisation"),
                        " Counter Level Selected as Organisation");
                m_assert.assertTrue(Cls_Generic_Methods.selectElementByVisibleText(oPage_SequenceManager.select_prefixLevelDropdownInEditSequence,"Other"),
                        "Prefix Level Selected as Other");
                m_assert.assertTrue(!Cls_Generic_Methods.getSelectedValue(oPage_SequenceManager.select_moduleNameDropdownInEditSequence).isEmpty(),
                        " Module Name is Selected as "+Cls_Generic_Methods.getSelectedValue(oPage_SequenceManager.select_moduleNameDropdownInEditSequence));
                m_assert.assertTrue(!Cls_Generic_Methods.getSelectedValue(oPage_SequenceManager.select_departmentDropdownInEditSequence).isEmpty(),
                        " Department Name is Selected as "+Cls_Generic_Methods.getSelectedValue(oPage_SequenceManager.select_departmentDropdownInEditSequence));
                m_assert.assertTrue(Cls_Generic_Methods.getElementAttribute(oPage_SequenceManager.input_counterLengthBoxInEditSequence,"value").equalsIgnoreCase("6"),
                        " Counter Length Name is Selected as 6");


                for(WebElement eEntityButton : oPage_SequenceManager.list_displayEntitiesListInEditSequence){
                    if(Cls_Generic_Methods.isElementDisplayed(eEntityButton)){
                        m_assert.assertTrue(Cls_Generic_Methods.clickElement(eEntityButton),
                                "Display Entity Button Clicked Name as : "+Cls_Generic_Methods.getTextInElement(eEntityButton));
                       m_assert.assertTrue(Cls_Generic_Methods.selectElementByVisibleText(oPage_SequenceManager.select_addSeparators,"-"),
                              "Separator Add As - " );
                    }
                }

                Cls_Generic_Methods.customWait();
                Cls_Generic_Methods.sendKeysIntoElement(oPage_SequenceManager.input_modulePrefix,"Pre");
                Cls_Generic_Methods.selectElementByVisibleText(oPage_SequenceManager.select_dateFormat,"DDMMYY");
                Cls_Generic_Methods.selectElementByVisibleText(oPage_SequenceManager.select_yearFormat,"YYYY");

                String organisationCodeUI = Cls_Generic_Methods.getElementAttribute(oPage_SequenceManager.input_organisationCodeAbbreviation,"value");
                String facilityCodeUI = Cls_Generic_Methods.getElementAttribute(oPage_SequenceManager.input_facilityCodeAbbreviation,"value");
                String regionCodeUI = Cls_Generic_Methods.getElementAttribute(oPage_SequenceManager.input_regionCodeAbbreviation,"value");
                String counterCodeUI = Cls_Generic_Methods.getElementAttribute(oPage_SequenceManager.input_counterCodeAbbreviation,"value");

                m_assert.assertTrue(organisationCodeUI.equalsIgnoreCase(organisationId),"Organisation Code Displayed correctly");
                m_assert.assertTrue(facilityCodeUI.equalsIgnoreCase(facilityCode),"Facility Code Displayed correctly");
                m_assert.assertTrue(regionCodeUI.equalsIgnoreCase(regionCodeUI),"Region Code Displayed correctly");
                m_assert.assertTrue(!counterCodeUI.isEmpty(),"Counter Code Displayed correctly");

                Cls_Generic_Methods.clickElement(oPage_SequenceManager.button_previewButton);
                Cls_Generic_Methods.customWait();
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("ddMMyy");
                LocalDateTime now = LocalDateTime.now();
                String todayDate = dtf.format(now);
                 dtf = DateTimeFormatter.ofPattern("yyyy");
                 now = LocalDateTime.now();
                String todayYear = dtf.format(now);
                String previewSequenceActual = organisationId+"-"+facilityCode+"-"+RegionCode+"-Pre-"+todayDate+
                        "-"+todayYear+"-"+counterCodeUI+"-";
                String previewCodeUI = Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.text_previewSequenceText);

                m_assert.assertTrue(previewSequenceActual.equalsIgnoreCase(previewCodeUI),
                        "Preview Code Displayed Correctly as per rule");


                for(WebElement eEntityButton : oPage_SequenceManager.list_displayEntitiesListInEditSequence){
                    if(Cls_Generic_Methods.isElementDisplayed(eEntityButton)){
                        m_assert.assertTrue(Cls_Generic_Methods.getElementAttribute(eEntityButton,"class").contains("darkblue"),
                                Cls_Generic_Methods.getTextInElement(eEntityButton)+" is Selected");
                    }
                }

                String sequenceCreationDisplayName[] = {"Organisation Code","Separator","Facility Abbreviation","Region Abbreviation","Module Prefix","Date","Year Format","Counter"};
               int k = 0;
               List<String> sequenceCreationDisplayNameOnUI = new ArrayList<>();
                for(WebElement eEntityButton : oPage_SequenceManager.list_sequenceCreationTableNameDataListInEditSequence){
                    if(Cls_Generic_Methods.isElementDisplayed(eEntityButton)){
                        String name = Cls_Generic_Methods.getTextInElement(eEntityButton);
                        if(k == 8){
                            m_assert.assertTrue(name.equalsIgnoreCase(sequenceCreationDisplayName[1])," Selected Entity Name Showing In Table Correctly"+sequenceCreationDisplayName[1]);

                        }else{
                        if(name.equalsIgnoreCase(sequenceCreationDisplayName[k])) {
                            m_assert.assertTrue(" Selected Entity Name Showing In Table Correctly as "+sequenceCreationDisplayName[k]);
                            k++;
                        }else {
                            m_assert.assertTrue(name.equalsIgnoreCase(sequenceCreationDisplayName[1])," Selected Entity Name Showing In Table Correctly"+sequenceCreationDisplayName[1]);
                        }
                        }
                        sequenceCreationDisplayNameOnUI.add(name);
                    }

                }

                m_assert.assertTrue(!Cls_Generic_Methods.isElementEnabled(oPage_SequenceManager.select_counterLevelDropdownInEditSequence),
                        " Counter Level Selection Box is Disabled as Counter is selected ");
                m_assert.assertTrue(!Cls_Generic_Methods.isElementEnabled(oPage_SequenceManager.select_counterLevelDropdownInEditSequence),
                        "Prefix Selection Box is Disabled as Counter is selected");

                for(WebElement eEntityButton : oPage_SequenceManager.list_displayEntitiesListInEditSequence){
                    if(Cls_Generic_Methods.isElementDisplayed(eEntityButton)){
                        m_assert.assertTrue(Cls_Generic_Methods.clickElement(eEntityButton),
                                "Display Entity Button clicked Correctly as : "+Cls_Generic_Methods.getTextInElement(eEntityButton));
                        Cls_Generic_Methods.customWait(1);
                        m_assert.assertTrue(!Cls_Generic_Methods.getElementAttribute(eEntityButton,"class").contains("darkblue"),
                                Cls_Generic_Methods.getTextInElement(eEntityButton)+" is Not Selected after Deselection");
                        index++;
                    }
                }

                m_assert.assertTrue(Cls_Generic_Methods.isElementEnabled(oPage_SequenceManager.select_counterLevelDropdownInEditSequence),
                        " Counter Level Selection Box is Enabled as Counter is selected ");
                m_assert.assertTrue(Cls_Generic_Methods.isElementEnabled(oPage_SequenceManager.select_counterLevelDropdownInEditSequence),
                        "Prefix Selection Box is Enabled as Counter is selected");

                for(WebElement eEntityButton : oPage_SequenceManager.list_sequenceCreationTableNameDataListInEditSequence){
                    if(Cls_Generic_Methods.isElementDisplayed(eEntityButton)){
                        String name = Cls_Generic_Methods.getTextInElement(eEntityButton);
                        if(name.equalsIgnoreCase(sequenceCreationDisplayName[1])) {
                            m_assert.assertTrue(" DeSelected Entity Name Not Showing In Table Correctly as ");
                        }else {
                            m_assert.assertFalse(" Selected Entity Name Showing In Table "+sequenceCreationDisplayName[k]);
                        }
                    }

                }

                Cls_Generic_Methods.clickElement(oPage_CommonElements.button_closeTemplateWithoutSaving);
                Cls_Generic_Methods.customWait(3);

                Cls_Generic_Methods.clickElement(oPage_SequenceManager.button_addSequenceButton);
                Cls_Generic_Methods.customWait(4);
                Cls_Generic_Methods.selectElementByVisibleText(oPage_SequenceManager.select_counterLevelDropdownInEditSequence,"Organisation");
                Cls_Generic_Methods.selectElementByVisibleText(oPage_SequenceManager.select_prefixLevelDropdownInEditSequence,"Other");

                for(WebElement eEntityButton : oPage_SequenceManager.list_displayEntitiesListInEditSequence){
                    if(Cls_Generic_Methods.isElementDisplayed(eEntityButton)){
                        m_assert.assertTrue(Cls_Generic_Methods.clickElement(eEntityButton),
                                "Display Entity Button clicked Correctly as : "+Cls_Generic_Methods.getTextInElement(eEntityButton));
                        Cls_Generic_Methods.customWait(1);
                        m_assert.assertTrue(Cls_Generic_Methods.selectElementByVisibleText(oPage_SequenceManager.select_addSeparators,"-"),
                                "Separator Add As - " );
                        index++;
                    }
                }

                int lengthOfSequenceEntityInTable = oPage_SequenceManager.list_sequenceCreationTableDataListInEditSequence.size();
                List<String> rawDataBeforeMoveUp = new ArrayList<>();
                List<String> rawDataAfterMoveUp = new ArrayList<>();
                List<String> rawDataAfterMoveDown = new ArrayList<>();
                List<String> rawDataAfterDelete = new ArrayList<>();

                for(WebElement rawData : oPage_SequenceManager.list_sequenceCreationTableDataListInEditSequence){
                    rawDataBeforeMoveUp.add(Cls_Generic_Methods.getTextInElement(rawData));
                }

                clickOnActionInEditSequence("Move Up","Facility Abbreviation");

                for(WebElement rawData : oPage_SequenceManager.list_sequenceCreationTableDataListInEditSequence){
                    rawDataAfterMoveUp.add(Cls_Generic_Methods.getTextInElement(rawData));
                }

                m_assert.assertTrue(lengthOfSequenceEntityInTable == oPage_SequenceManager.list_sequenceCreationTableDataListInEditSequence.size(),
                        " Sequence Entity Table Size is Same after Move Up Operation");


                m_assert.assertTrue(rawDataAfterMoveUp.get(1).split("\n")[1].equals(rawDataBeforeMoveUp.get(2).split("\n")[1]),
                        " Move Up Operation Working Correctly ");


                clickOnActionInEditSequence("Move Down","Facility Abbreviation");

                for(WebElement rawData : oPage_SequenceManager.list_sequenceCreationTableDataListInEditSequence){
                    rawDataAfterMoveDown.add(Cls_Generic_Methods.getTextInElement(rawData));
                }

                m_assert.assertTrue(lengthOfSequenceEntityInTable == oPage_SequenceManager.list_sequenceCreationTableDataListInEditSequence.size(),
                        " Sequence Entity Table Size is Same after Move Down Operation");

                m_assert.assertTrue(rawDataAfterMoveDown.equals(rawDataBeforeMoveUp),
                        " Move Down Operation Working Correctly ");

                clickOnActionInEditSequence("remove","Facility Abbreviation");

                for(WebElement rawData : oPage_SequenceManager.list_sequenceCreationTableDataListInEditSequence){
                    rawDataAfterDelete.add(Cls_Generic_Methods.getTextInElement(rawData));
                }

                m_assert.assertTrue((lengthOfSequenceEntityInTable-1) == oPage_SequenceManager.list_sequenceCreationTableDataListInEditSequence.size(),
                        " Sequence Entity Table Size is Same after Delete Operation");


                m_assert.assertTrue(!rawDataAfterDelete.equals(rawDataBeforeMoveUp),
                        " Delete Operation Working Correctly ");

                m_assert.assertTrue(!rawDataAfterDelete.contains(rawDataBeforeMoveUp.get(2)),
                        " Delete Operation Working Correctly as Facility Data Not Displaying");

                Cls_Generic_Methods.clickElement(oPage_CommonElements.button_closeTemplateWithoutSaving);
                Cls_Generic_Methods.customWait(3);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateEditSequenceManagerForOrganisationFunctionality() {
        Page_SequenceManager oPage_SequenceManager = new Page_SequenceManager(driver);
        List<String> sequenceDataBeforeEdit = new ArrayList<>();

        String newPrefix = "Pre"+CommonActions.getRandomString(4);


        try {
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                boolean clickOnEditButton = clickOnAction("Edit","Organisation");
                m_assert.assertTrue(clickOnEditButton,"Edit Button Clicked");
                if(clickOnEditButton){

                    for(WebElement eEntityButton : oPage_SequenceManager.list_displayEntitiesListInEditSequence){
                        if(Cls_Generic_Methods.isElementDisplayed(eEntityButton)){
                            if(Cls_Generic_Methods.getElementAttribute(eEntityButton,"class").contains("darkblue")){
                                if(Cls_Generic_Methods.getTextInElement(eEntityButton).contains("Organisation Code")){
                                    m_assert.assertTrue(!Cls_Generic_Methods.isElementEnabled(oPage_SequenceManager.select_counterLevelDropdownInEditSequence),
                                            " Counter Level Selection Dropdown is Disabled");
                                }else if(Cls_Generic_Methods.getTextInElement(eEntityButton).contains("Prefix")){
                                    m_assert.assertTrue(!Cls_Generic_Methods.isElementEnabled(oPage_SequenceManager.select_prefixLevelDropdownInEditSequence),
                                            "Prefix Level Selection Dropdown is Disabled");

                                }
                            }
                        }
                    }

                    m_assert.assertTrue(!Cls_Generic_Methods.isElementEnabled(oPage_SequenceManager.select_moduleNameDropdownInEditSequence),
                            "Module Name Selection Box Displayed Disabled Correctly");
                    m_assert.assertTrue(!Cls_Generic_Methods.isElementEnabled(oPage_SequenceManager.select_departmentDropdownInEditSequence),
                            "Department Name Selection Box Displayed Disabled Correctly");

                    m_assert.assertTrue(Cls_Generic_Methods.getSelectedValue(oPage_SequenceManager.select_moduleNameDropdownInEditSequence).equalsIgnoreCase(clickedRawData.get(0)),
                            "Module Name Displayed Correctly as "+clickedRawData.get(0));
                    m_assert.assertTrue(!Cls_Generic_Methods.getSelectedValue(oPage_SequenceManager.select_departmentDropdownInEditSequence).equalsIgnoreCase(clickedRawData.get(2)),
                            "Department Name Displayed Correctly as "+clickedRawData.get(2));
                    m_assert.assertInfo("Sequence Before Edit Was : "+clickedRawData.get(3));
                    sequenceDataBeforeEdit.add(Cls_Generic_Methods.getElementAttribute(oPage_SequenceManager.input_modulePrefix,"value"));
                    Cls_Generic_Methods.clearValuesInElement(oPage_SequenceManager.input_modulePrefix);
                    m_assert.assertTrue(Cls_Generic_Methods.sendKeysIntoElement(oPage_SequenceManager.input_modulePrefix,newPrefix),
                            "Module Prefix Entered as :"+newPrefix);
                    String sExistingCounter = Cls_Generic_Methods.getElementAttribute(oPage_SequenceManager.input_counterCodeAbbreviation,"value");
                    sequenceDataBeforeEdit.add(sExistingCounter);
                    Cls_Generic_Methods.clearValuesInElement(oPage_SequenceManager.input_counterCodeAbbreviation);
                    m_assert.assertTrue(Cls_Generic_Methods.sendKeysIntoElement(oPage_SequenceManager.input_counterCodeAbbreviation,sExistingCounter+"1"),
                            "Module Prefix Entered as :"+sExistingCounter+"1");
                    m_assert.assertTrue(Cls_Generic_Methods.clickElement(oPage_SequenceManager.button_createButton),"Update Button Clicked");
                    Cls_Generic_Methods.customWait(5);
                    Cls_Generic_Methods.driverRefresh();
                    Cls_Generic_Methods.customWait(5);
                    CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                    Cls_Generic_Methods.customWait();
                    clickOnAction("Edit","Organisation");
                    Cls_Generic_Methods.customWait(2);
                    m_assert.assertTrue(Cls_Generic_Methods.getElementAttribute(oPage_SequenceManager.input_modulePrefix,"value").equalsIgnoreCase(newPrefix),
                            "Prefix value updated correctly");
                    m_assert.assertTrue(Cls_Generic_Methods.getElementAttribute(oPage_SequenceManager.input_counterCodeAbbreviation,"value").equalsIgnoreCase(sExistingCounter+"1"),
                            "Counter value updated correctly , Edit Working Fine");


                }



            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateEditSequenceManagerForFacilityFunctionality() {
        Page_SequenceManager oPage_SequenceManager = new Page_SequenceManager(driver);
        List<String> sequenceDataBeforeEdit = new ArrayList<>();

        String newPrefix = "Pre"+CommonActions.getRandomString(4);


        try {
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                boolean clickOnEditButton = clickOnAction("Edit","Facility");
                m_assert.assertTrue(clickOnEditButton,"Edit Button Clicked");
                if(clickOnEditButton){

                    for(WebElement eEntityButton : oPage_SequenceManager.list_displayEntitiesListInEditSequence){
                        if(Cls_Generic_Methods.isElementDisplayed(eEntityButton)){
                            if(Cls_Generic_Methods.getElementAttribute(eEntityButton,"class").contains("darkblue")){
                                if(Cls_Generic_Methods.getTextInElement(eEntityButton).contains("Counter")){
                                    m_assert.assertTrue(!Cls_Generic_Methods.isElementEnabled(oPage_SequenceManager.select_counterLevelDropdownInEditSequence),
                                            " Counter Level Selection Dropdown is Disabled");
                                    m_assert.assertTrue(Cls_Generic_Methods.getSelectedValue(oPage_SequenceManager.select_counterLevelDropdownInEditSequence).contains("Facility"),
                                            " Counter Level Dropdown Value Displayed Correctly");
                                }else if(Cls_Generic_Methods.getTextInElement(eEntityButton).contains("Prefix")){
                                    m_assert.assertTrue(!Cls_Generic_Methods.isElementEnabled(oPage_SequenceManager.select_prefixLevelDropdownInEditSequence),
                                            "Prefix Level Selection Dropdown is Disabled");
                                    m_assert.assertTrue(Cls_Generic_Methods.getSelectedValue(oPage_SequenceManager.select_counterLevelDropdownInEditSequence).contains("Other"),
                                            " Counter Level Dropdown Value Displayed Correctly");

                                }
                            }
                        }
                    }

                    m_assert.assertTrue(!Cls_Generic_Methods.isElementEnabled(oPage_SequenceManager.select_moduleNameDropdownInEditSequence),
                            "Module Name Selection Box Displayed Disabled Correctly");
                    m_assert.assertTrue(!Cls_Generic_Methods.isElementEnabled(oPage_SequenceManager.select_departmentDropdownInEditSequence),
                            "Department Name Selection Box Displayed Disabled Correctly");

                    m_assert.assertTrue(Cls_Generic_Methods.getSelectedValue(oPage_SequenceManager.select_moduleNameDropdownInEditSequence).equalsIgnoreCase(clickedRawData.get(0)),
                            "Module Name Displayed Correctly as "+clickedRawData.get(0));
                    m_assert.assertTrue(!Cls_Generic_Methods.getSelectedValue(oPage_SequenceManager.select_departmentDropdownInEditSequence).equalsIgnoreCase(clickedRawData.get(2)),
                            "Department Name Displayed Correctly as "+clickedRawData.get(2));
                    m_assert.assertInfo("Sequence Before Edit Was : "+clickedRawData.get(3+6));
                    sequenceDataBeforeEdit.add(Cls_Generic_Methods.getElementAttribute(oPage_SequenceManager.input_modulePrefix,"value"));
                    Cls_Generic_Methods.clearValuesInElement(oPage_SequenceManager.input_modulePrefix);
                    m_assert.assertTrue(Cls_Generic_Methods.sendKeysIntoElement(oPage_SequenceManager.input_modulePrefix,newPrefix),
                            "Module Prefix Entered as :"+newPrefix);
                    String sExistingCounter = Cls_Generic_Methods.getElementAttribute(oPage_SequenceManager.input_counterCodeAbbreviation,"value");
                    sequenceDataBeforeEdit.add(sExistingCounter);
                    Cls_Generic_Methods.clearValuesInElement(oPage_SequenceManager.input_counterCodeAbbreviation);
                    m_assert.assertTrue(Cls_Generic_Methods.sendKeysIntoElement(oPage_SequenceManager.input_counterCodeAbbreviation,sExistingCounter+"1"),
                            "Module Prefix Entered as :"+sExistingCounter+"1");
                    m_assert.assertTrue(Cls_Generic_Methods.clickElement(oPage_SequenceManager.button_createButton),"Update Button Clicked");
                    Cls_Generic_Methods.customWait(5);
                    Cls_Generic_Methods.driverRefresh();
                    Cls_Generic_Methods.customWait(5);
                    CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                    Cls_Generic_Methods.customWait();
                    clickOnAction("Edit","Facility");
                    Cls_Generic_Methods.customWait(2);
                    m_assert.assertTrue(Cls_Generic_Methods.getElementAttribute(oPage_SequenceManager.input_modulePrefix,"value").equalsIgnoreCase(newPrefix),
                            "Prefix value updated correctly");
                    m_assert.assertTrue(Cls_Generic_Methods.getElementAttribute(oPage_SequenceManager.input_counterCodeAbbreviation,"value").equalsIgnoreCase(sExistingCounter+"1"),
                            "Counter value updated correctly , Edit Working Fine");


                }



            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateIpdModuleOrganisationSequenceForAdmissionId() {
        Page_IPD oPage_IPD = new Page_IPD(driver);
        Page_AdmissionInPreOperative oPage_AdmissionInPreOperative = new Page_AdmissionInPreOperative(driver);
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);

        try {
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(4);

                //Validate On Organisation Level
                clickOnDefault("Admission","Admission ID",departmentNameList[1],propertiesLevelList[0]);
                getExistingSequenceNumberForCounter("Admission","Admission ID",departmentNameList[1],propertiesLevelList[0]);
                CommonActions.selectDepartmentOnApp(departmentNameList[0]);
                Cls_Generic_Methods.customWait(4);
                createPatientToValidatePatientInventoryFollow();
                scheduleAdmissionFromOPD();
                Cls_Generic_Methods.customWait();
                String admissionIdOnUi = Cls_Generic_Methods.getTextInElement(oPage_IPD.text_admissionId);
                Cls_Generic_Methods.clickElementByJS(driver,oPage_AdmissionInPreOperative.button_admissionInPreOperative);

                Cls_Generic_Methods.customWait(4);
                String admissionIdOnCreatedAdmission = Cls_Generic_Methods.getTextInElement(oPage_IPD.text_admissionIdInCreatedAdmission);
                Cls_Generic_Methods.clickElement(oPage_CommonElements.button_CloseTemplate);
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_IPD.text_preOperativeSection, 16);

                char admissionIdOnUiCharArray[] = admissionIdOnUi.toCharArray();
                char existingSequenceNumberCharArray[] = existingSequenceNumber.get(0).toCharArray();
                String newSequence = "";
                for(int i = 0;i<admissionIdOnUiCharArray.length;i++){
                    if(admissionIdOnUiCharArray[i] == existingSequenceNumberCharArray[i]){
                        newSequence = newSequence+admissionIdOnUiCharArray[i];
                    }else{
                        int lastCount = existingSequenceNumberCharArray[i]-'0';
                        int presentCount = admissionIdOnUiCharArray[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                            try {
                                if (existingSequenceNumberCharArray[i + 1] == 9) {
                                    String sIntital = String.valueOf(existingSequenceNumberCharArray[i] - '0');
                                    String sIntitalSecond = String.valueOf(existingSequenceNumberCharArray[i + 1] - '0');
                                    sIntital = sIntital + sIntitalSecond;
                                    intialCounter = Integer.parseInt(sIntital);
                                }else{
                                    String sIntital = String.valueOf(existingSequenceNumberCharArray[i] - '0');
                                    String sIntitalSecond = String.valueOf(existingSequenceNumberCharArray[i-1] - '0');
                                    sIntital = sIntital + sIntitalSecond;
                                    intialCounter = Integer.parseInt(sIntital);
                                }

                            }catch (Exception e){
                                e.printStackTrace();
                            }
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(admissionIdOnUi.equalsIgnoreCase(admissionIdOnCreatedAdmission),
                        " Admission Id Showing correctly In Schedule Details and Admission Template");

                m_assert.assertTrue(admissionIdOnUi.equalsIgnoreCase(newSequence),
                        " Admission Id Sequence Displayed correctly as its increasing by one counter "+admissionIdOnUi);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Admission","Admission ID",departmentNameList[1],propertiesLevelList[0]);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                m_assert.assertTrue("Previous Sequence Was :"+existingSequenceNumber.get(0));
                m_assert.assertTrue("New Sequence Is :"+newSequence);

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                Cls_Generic_Methods.customWait(3);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Admission","Admission ID","IPD","Organisation");


                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();
                scheduleAdmissionFromOPD();
                Cls_Generic_Methods.customWait();
                admissionIdOnUi = Cls_Generic_Methods.getTextInElement(oPage_IPD.text_admissionId);
                Cls_Generic_Methods.clickElement(oPage_IPD.text_admissionId);
                Cls_Generic_Methods.customWait();
                Cls_Generic_Methods.clickElementByJS(driver,oPage_AdmissionInPreOperative.button_admissionInPreOperative);

                Cls_Generic_Methods.customWait(3);
                admissionIdOnCreatedAdmission = Cls_Generic_Methods.getTextInElement(oPage_IPD.text_admissionIdInCreatedAdmission);
                Cls_Generic_Methods.clickElement(oPage_CommonElements.button_CloseTemplate);
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_IPD.text_preOperativeSection, 16);

                char admissionIdOnUiArrayForNewFacility[] = admissionIdOnUi.toCharArray();
                char existingSequenceNumberCharArrayNewFacility[] = existingSequenceNumber.get(2).toCharArray();

                newSequence = "";
                for(int i = 0;i<admissionIdOnUiArrayForNewFacility.length;i++){
                    if(admissionIdOnUiArrayForNewFacility[i] == existingSequenceNumberCharArrayNewFacility[i]){
                        newSequence = newSequence+admissionIdOnUiArrayForNewFacility[i];
                    }else{
                        int lastCount = existingSequenceNumberCharArrayNewFacility[i]-'0';
                        int presentCount = admissionIdOnUiArrayForNewFacility[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one for different facility as well");
                            try {
                                if (admissionIdOnUiArrayForNewFacility[i + 1] == 9) {
                                    String sIntital = String.valueOf(admissionIdOnUiArrayForNewFacility[i] - '0');
                                    String sIntitalSecond = String.valueOf(admissionIdOnUiArrayForNewFacility[i + 1] - '0');
                                    sIntital = sIntital + sIntitalSecond;
                                    updatedCounter = Integer.parseInt(sIntital);
                                }else{
                                    String sIntital = String.valueOf(admissionIdOnUiArrayForNewFacility[i] - '0');
                                    String sIntitalSecond = String.valueOf(admissionIdOnUiArrayForNewFacility[i-1] - '0');
                                    sIntital = sIntital + sIntitalSecond;
                                    updatedCounter = Integer.parseInt(sIntital);
                                }

                            }catch (Exception e){
                                e.printStackTrace();
                            }
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(admissionIdOnUi.equalsIgnoreCase(admissionIdOnCreatedAdmission),
                        " Admission Id Showing correctly In Schedule Details and Admission Template in different facility");

                m_assert.assertTrue(admissionIdOnUi.equalsIgnoreCase(newSequence),
                        " Admission Id Sequence Displayed correctly as its increasing by one counter "+admissionIdOnUi+" for different facility");

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Admission","Admission ID","IPD","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of admission on facility level "+newSequence);

                m_assert.assertTrue("Previous Sequence Was :"+existingSequenceNumber.get(2));
                m_assert.assertTrue("New Sequence Is :"+newSequence);

                m_assert.assertTrue((intialCounter+2) == updatedCounter, "Counter is increasing correctly as initial it was "+intialCounter+" After creation of 2 records its "+updatedCounter);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateIpdModuleFacilitySequenceForAdmissionId() {
        Page_IPD oPage_IPD = new Page_IPD(driver);
        Page_AdmissionInPreOperative oPage_AdmissionInPreOperative = new Page_AdmissionInPreOperative(driver);
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);

        try {
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Facility Level

                clickOnDefault("Admission","Admission ID","IPD","Facility");
                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Admission","Admission ID","IPD","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Admission","Admission ID","IPD","Facility");
                int indexOfTSTSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();
                scheduleAdmissionFromOPD();
                String admissionIdOnUi = Cls_Generic_Methods.getTextInElement(oPage_IPD.text_admissionId);
                Cls_Generic_Methods.clickElement(oPage_AdmissionInPreOperative.button_admissionInPreOperative);

                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_CommonElements.button_CloseTemplate, 16);
                String admissionIdOnCreatedAdmission = Cls_Generic_Methods.getTextInElement(oPage_IPD.text_admissionIdInCreatedAdmission);
                Cls_Generic_Methods.clickElement(oPage_CommonElements.button_CloseTemplate);
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_IPD.text_preOperativeSection, 16);

                String newSequence = "";
                for(int i = 0;i<admissionIdOnUi.toCharArray().length;i++){
                    if(admissionIdOnUi.toCharArray()[i] == existingSequenceNumber.get(indexOfTSTSequence).toCharArray()[i]){
                        newSequence = newSequence+admissionIdOnUi.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfTSTSequence).toCharArray()[i]-'0';
                        int presentCount = admissionIdOnUi.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(admissionIdOnUi.equalsIgnoreCase(admissionIdOnCreatedAdmission),
                        " Admission Id Showing correctly In Schedule Details and Admission Template");

                m_assert.assertTrue(admissionIdOnUi.equalsIgnoreCase(newSequence),
                        " Admission Id Sequence Displayed correctly as its increasing by one counter "+admissionIdOnUi);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Admission","Admission ID","IPD","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of admission on facility level "+newSequence);

                m_assert.assertTrue("Previous Sequence Was : "+existingSequenceNumber.get(indexOfTSTSequence));
                m_assert.assertTrue("New Sequence Is : "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Admission","Admission ID","IPD","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different facility correctly only in current facility "+newSequence);

                m_assert.assertTrue("Previous Sequence Was : "+existingSequenceNumber.get(indexOfTFSSequence));
                m_assert.assertTrue("New Sequence Is : "+counterForExistingSequence);

            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateIpdModuleRegionSequenceForAdmissionId() {
        Page_IPD oPage_IPD = new Page_IPD(driver);
        Page_AdmissionInPreOperative oPage_AdmissionInPreOperative = new Page_AdmissionInPreOperative(driver);
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);

        try {
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Facility Level

                clickOnDefault("Admission","Admission ID","IPD","Region");
                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Admission","Admission ID","IPD","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Admission","Admission ID","IPD","Region");
                int indexOfTSTSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();
                scheduleAdmissionFromOPD();
                String admissionIdOnUi = Cls_Generic_Methods.getTextInElement(oPage_IPD.text_admissionId);
                Cls_Generic_Methods.clickElement(oPage_AdmissionInPreOperative.button_admissionInPreOperative);

                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_CommonElements.button_CloseTemplate, 16);
                String admissionIdOnCreatedAdmission = Cls_Generic_Methods.getTextInElement(oPage_IPD.text_admissionIdInCreatedAdmission);
                Cls_Generic_Methods.clickElement(oPage_CommonElements.button_CloseTemplate);
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_IPD.text_preOperativeSection, 16);

                String newSequence = "";
                for(int i = 0;i<admissionIdOnUi.toCharArray().length;i++){
                    if(admissionIdOnUi.toCharArray()[i] == existingSequenceNumber.get(indexOfTSTSequence).toCharArray()[i]){
                        newSequence = newSequence+admissionIdOnUi.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfTSTSequence).toCharArray()[i]-'0';
                        int presentCount = admissionIdOnUi.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(admissionIdOnUi.equalsIgnoreCase(admissionIdOnCreatedAdmission),
                        " Admission Id Showing correctly In Schedule Details and Admission Template");

                m_assert.assertTrue(admissionIdOnUi.equalsIgnoreCase(newSequence),
                        " Admission Id Sequence Displayed correctly as its increasing by one counter "+admissionIdOnUi);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Admission","Admission ID","IPD","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of admission on Region level "+newSequence);


                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Admission","Admission ID","IPD","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }


    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpdModuleOrganisationSequenceForAdvanceDisplayID() {
        Page_OPD oPage_OPD = new Page_OPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

               //Validate On Organisation Level
                boolean clicked = clickOnDefault("Advance Payment","Advance Display ID","OPD","Organisation");
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                String concatPatientFullName = CommonActions.getFullPatientName(myPatient).toUpperCase().trim();
                boolean patientSelectedOPD = CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                }
                Cls_Generic_Methods.customWait();


                String advanceId = SequenceCommonActions.createAdvance();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                            int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                            int presentCount = advanceId.toCharArray()[i] -'0';
                            if(presentCount == lastCount+1){
                                m_assert.assertTrue("Counter is correctly increasing by one");
                            }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                m_assert.assertTrue("Previous Sequence Was : "+existingSequenceNumber.get(0));
                m_assert.assertTrue("New Sequence Is : "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Organisation");
                indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                patientSelectedOPD = CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    Cls_Generic_Methods.customWait();
                }

                advanceId = SequenceCommonActions.createAdvance();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(4);
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                m_assert.assertTrue("Previous Sequence Was : "+existingSequenceNumber.get(indexOfSecondSequence));
                m_assert.assertTrue("New Sequence Is : "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpdModuleFacilitySequenceForAdvanceDisplayID() {
        Page_OPD oPage_OPD = new Page_OPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Advance Payment","Advance Display ID","OPD","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                String concatPatientFullName = CommonActions.getFullPatientName(myPatient).toUpperCase().trim();
                boolean patientSelectedOPD = CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                }
                Cls_Generic_Methods.customWait();


                String advanceId = SequenceCommonActions.createAdvance();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                patientSelectedOPD = CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    Cls_Generic_Methods.customWait();
                }

                advanceId = SequenceCommonActions.createAdvance();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpdModuleRegionSequenceForAdvanceDisplayID() {
        Page_OPD oPage_OPD = new Page_OPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Advance Payment","Advance Display ID","OPD","Region");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Region");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                String concatPatientFullName = CommonActions.getFullPatientName(myPatient).toUpperCase().trim();
                boolean patientSelectedOPD = CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                }
                Cls_Generic_Methods.customWait();


                String advanceId = SequenceCommonActions.createAdvance();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Region");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Region");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                patientSelectedOPD = CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    Cls_Generic_Methods.customWait();
                }

                advanceId = SequenceCommonActions.createAdvance();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","OPD","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }



    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateIpdModuleOrganisationSequenceForAdvanceDisplayID() {
        Page_IPD oPage_IPD = new Page_IPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Advance Payment","Advance Display ID","IPD","Organisation");
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","IPD","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("IPD");
                Cls_Generic_Methods.customWait();
                String concatPatientFullName = CommonActions.getFullPatientName(myPatient).toUpperCase().trim();
                boolean patientSelectedOPD = CommonActions.selectPatientNameInIpd(oPage_IPD.rows_patientNamesOnIPD, concatPatientFullName);;

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    scheduleAdmissionFromOPD();
                }
                Cls_Generic_Methods.customWait();


                String advanceId = SequenceCommonActions.createAdvance();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","IPD","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                CommonActions.selectDepartmentOnApp("IPD");
                Cls_Generic_Methods.customWait();
                 patientSelectedOPD = CommonActions.selectPatientNameInIpd(oPage_IPD.rows_patientNamesOnIPD, concatPatientFullName);;

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    scheduleAdmissionFromOPD();
                }

                advanceId = SequenceCommonActions.createAdvance();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","IPD","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateIpdModuleFacilitySequenceForAdvanceDisplayID() {
        Page_IPD oPage_IPD = new Page_IPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Advance Payment","Advance Display ID","IPD","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","IPD","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","IPD","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("IPD");
                Cls_Generic_Methods.customWait();
                String concatPatientFullName = CommonActions.getFullPatientName(myPatient).toUpperCase().trim();
                boolean patientSelectedOPD = CommonActions.selectPatientNameInIpd(oPage_IPD.rows_patientNamesOnIPD, concatPatientFullName);;

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    scheduleAdmissionFromOPD();
                }
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.createAdvance();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","IPD","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","IPD","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                patientSelectedOPD = CommonActions.selectPatientNameInIpd(oPage_IPD.rows_patientNamesOnIPD, concatPatientFullName);;

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    scheduleAdmissionFromOPD();
                }
                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.createAdvance();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","IPD","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","IPD","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateIpdModuleRegionSequenceForAdvanceDisplayID() {
        Page_IPD oPage_IPD = new Page_IPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Advance Payment","Advance Display ID","IPD","Region");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","IPD","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","IPD","Region");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("IPD");
                Cls_Generic_Methods.customWait();
                String concatPatientFullName = CommonActions.getFullPatientName(myPatient).toUpperCase().trim();
                boolean patientSelectedOPD = CommonActions.selectPatientNameInIpd(oPage_IPD.rows_patientNamesOnIPD, concatPatientFullName);;

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    scheduleAdmissionFromOPD();
                }
                Cls_Generic_Methods.customWait();


                String advanceId = SequenceCommonActions.createAdvance();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","IPD","Region");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","IPD","Region");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                 patientSelectedOPD = CommonActions.selectPatientNameInIpd(oPage_IPD.rows_patientNamesOnIPD, concatPatientFullName);;

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    scheduleAdmissionFromOPD();
                }
                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.createAdvance();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","IPD","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","IPD","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }


    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleOrganisationSequenceForAdvanceDisplayID() {
        Page_IPD oPage_IPD = new Page_IPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Advance Payment","Advance Display ID","Optical","Organisation");
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                SequenceCommonActions.validateSaleTransactionFunctionality("OpticalStore- Optical");
                Cls_Generic_Methods.customWait();
                String advanceId = SequenceCommonActions.createAdvance();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                SequenceCommonActions.validateSaleTransactionFunctionality("OpticalStore- Optical");
                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.createAdvance();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleFacilitySequenceForAdvanceDisplayID() {
        Page_IPD oPage_IPD = new Page_IPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Advance Payment","Advance Display ID","Optical","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                SequenceCommonActions.validateSaleTransactionFunctionality("OpticalStore- Optical");
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.createAdvance();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                SequenceCommonActions.validateSaleTransactionFunctionality("OpticalStore- Optical");
                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.createAdvance();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleRegionSequenceForAdvanceDisplayID() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Advance Payment","Advance Display ID","Optical","Region");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Region");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                SequenceCommonActions.validateSaleTransactionFunctionality("OpticalStore- Optical");
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.createAdvance();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Region");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Region");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                SequenceCommonActions.validateSaleTransactionFunctionality("OpticalStore- Optical");
                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.createAdvance();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Optical","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }


    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleOrganisationSequenceForAdvanceDisplayID() {
        Page_IPD oPage_IPD = new Page_IPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Advance Payment","Advance Display ID","Pharmacy","Organisation");
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                SequenceCommonActions.validatePharmacySaleTransactionFunctionality("Pharmacy automation- Pharmacy");
                Cls_Generic_Methods.customWait();
                String advanceId = SequenceCommonActions.createAdvance();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                SequenceCommonActions.validatePharmacySaleTransactionFunctionality("Pharmacy automation- Pharmacy");
                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.createAdvance();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleFacilitySequenceForAdvanceDisplayID() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Advance Payment","Advance Display ID","Pharmacy","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                SequenceCommonActions.validatePharmacySaleTransactionFunctionality("Pharmacy automation- Pharmacy");
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.createAdvance();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                SequenceCommonActions.validatePharmacySaleTransactionFunctionality("Pharmacy automation- Pharmacy");
                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.createAdvance();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleRegionSequenceForAdvanceDisplayID() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Advance Payment","Advance Display ID","Pharmacy","Region");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Region");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                SequenceCommonActions.validatePharmacySaleTransactionFunctionality("Pharmacy automation- Pharmacy");
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.createAdvance();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Region");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Region");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                SequenceCommonActions.validatePharmacySaleTransactionFunctionality("Pharmacy automation- Pharmacy");
                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.createAdvance();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Advance Payment","Advance Display ID","Pharmacy","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpdModuleOrganisationSequenceForAppointmentID() {
        Page_PatientAppointmentDetails oPage_PatientAppointmentDetails = new Page_PatientAppointmentDetails(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Appointment","Appointment ID","OPD","Organisation");
                getExistingSequenceNumberForCounter("Appointment","Appointment ID","OPD","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();
                Cls_Generic_Methods.customWait();


                String appointmentId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_appointmentId);
                String newSequence = "";

                for(int i = 0;i<appointmentId.toCharArray().length;i++){
                    if(appointmentId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+appointmentId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = appointmentId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(appointmentId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+appointmentId);

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Appointment","Appointment ID","OPD","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();
                Cls_Generic_Methods.customWait();

                 appointmentId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_appointmentId);

                newSequence = "";
                for(int i = 0;i<appointmentId.toCharArray().length;i++){
                    if(appointmentId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+appointmentId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = appointmentId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(appointmentId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+appointmentId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Appointment","Appointment ID","OPD","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpdModuleFacilitySequenceForAppointmentID() {
        Page_PatientAppointmentDetails oPage_PatientAppointmentDetails = new Page_PatientAppointmentDetails(driver);


        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Appointment","Appointment ID","OPD","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Appointment","Appointment ID","OPD","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Appointment","Appointment ID","OPD","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();

                Cls_Generic_Methods.customWait();


                String appointmentId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_appointmentId);
                String newSequence = "";

                for(int i = 0;i<appointmentId.toCharArray().length;i++){
                    if(appointmentId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+appointmentId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = appointmentId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(appointmentId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+appointmentId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Appointment","Appointment ID","OPD","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Appointment","Appointment ID","OPD","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();
                Cls_Generic_Methods.customWait();

                 appointmentId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_appointmentId);

                newSequence = "";
                for(int i = 0;i<appointmentId.toCharArray().length;i++){
                    if(appointmentId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+appointmentId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = appointmentId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(appointmentId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+appointmentId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Appointment","Appointment ID","OPD","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Appointment","Appointment ID","OPD","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpdModuleRegionSequenceForAppointmentID() {
        Page_PatientAppointmentDetails oPage_PatientAppointmentDetails = new Page_PatientAppointmentDetails(driver);


        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Appointment","Appointment ID","OPD","Region");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Appointment","Appointment ID","OPD","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Appointment","Appointment ID","OPD","Region");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();

                Cls_Generic_Methods.customWait();


                String appointmentId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_appointmentId);
                String newSequence = "";

                for(int i = 0;i<appointmentId.toCharArray().length;i++){
                    if(appointmentId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+appointmentId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = appointmentId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(appointmentId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+appointmentId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Appointment","Appointment ID","OPD","Region");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Appointment","Appointment ID","OPD","Region");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();
                Cls_Generic_Methods.customWait();

                appointmentId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_appointmentId);

                newSequence = "";
                for(int i = 0;i<appointmentId.toCharArray().length;i++){
                    if(appointmentId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+appointmentId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = appointmentId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(appointmentId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+appointmentId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Appointment","Appointment ID","OPD","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Appointment","Appointment ID","OPD","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpdModuleOrganisationSequenceForCashSheetID() {
        Page_PatientAppointmentDetails oPage_PatientAppointmentDetails = new Page_PatientAppointmentDetails(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Case Sheet","CaseSheet ID","-","Organisation");
                getExistingSequenceNumberForCounter("Case Sheet","CaseSheet ID","-","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();
                Cls_Generic_Methods.customWait();


                Cls_Generic_Methods.clickElement(oPage_PatientAppointmentDetails.button_addCaseName);
                Cls_Generic_Methods.customWait();
                String caseId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_caseId);
                String newSequence = "";

                for(int i = 0;i<caseId.toCharArray().length;i++){
                    if(caseId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+caseId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = caseId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(caseId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+caseId);

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Case Sheet","CaseSheet ID","-","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();
                Cls_Generic_Methods.customWait();

                Cls_Generic_Methods.clickElement(oPage_PatientAppointmentDetails.button_addCaseName);
                Cls_Generic_Methods.customWait();
                caseId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_caseId);

                newSequence = "";
                for(int i = 0;i<caseId.toCharArray().length;i++){
                    if(caseId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+caseId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = caseId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(caseId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+caseId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Case Sheet","CaseSheet ID","-","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpdModuleRegionSequenceForCashSheetID() {
        Page_PatientAppointmentDetails oPage_PatientAppointmentDetails = new Page_PatientAppointmentDetails(driver);


        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Case Sheet","CaseSheet ID","-","Region");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Case Sheet","CaseSheet ID","-","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Case Sheet","CaseSheet ID","-","Region");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();

                Cls_Generic_Methods.customWait();

                Cls_Generic_Methods.clickElement(oPage_PatientAppointmentDetails.button_addCaseName);
                Cls_Generic_Methods.customWait();
                String caseId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_caseId);
                String newSequence = "";

                for(int i = 0;i<caseId.toCharArray().length;i++){
                    if(caseId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+caseId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = caseId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(caseId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+caseId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Case Sheet","CaseSheet ID","-","Region");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Case Sheet","CaseSheet ID","-","Region");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();
                Cls_Generic_Methods.customWait();

                caseId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_appointmentId);

                newSequence = "";
                for(int i = 0;i<caseId.toCharArray().length;i++){
                    if(caseId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+caseId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = caseId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(caseId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+caseId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Case Sheet","CaseSheet ID","-","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Case Sheet","CaseSheet ID","-","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleOrganisationSequenceForDeliveryChallan() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Delivery Challan","Delivery Challan","Optical","Organisation");
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Optical","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("OpticalStore- Optical","Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Optical","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("OpticalStore- Optical","Pharmacy automation- Pharmacy");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Optical","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleEntitySequenceForDeliveryChallan() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Delivery Challan","Delivery Challan","Optical","Entity");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Optical","Entity");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Optical","Entity");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("OpticalStore- Optical","Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Optical","Entity");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Optical","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("OpticalStore- Optical","Pharmacy automation- Pharmacy");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Optical","Entity");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Optical","Entity");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleOrganisationSequenceForDeliveryChallan() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Delivery Challan","Delivery Challan","Pharmacy","Organisation");
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Pharmcay","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("Pharmacy automation- Pharmacy","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Pharmacy","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("Pharmacy automation- Pharmacy","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Pharmacy","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleRegionSequenceForDeliveryChallan() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Delivery Challan","Delivery Challan","Pharmacy","Region");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Pharmacy","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Pharmacy","Region");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("Pharmacy automation- Pharmacy","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Pharmacy","Region");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Pharmacy","Region");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("Pharmacy automation- Pharmacy","OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Pharmacy","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Pharmacy","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleEntitySequenceForDeliveryChallan() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Delivery Challan","Delivery Challan","Pharmacy","Entity");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Pharmacy","Entity");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Pharmacy","Entity");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("Pharmacy automation- Pharmacy","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Pharmacy","Entity");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Pharmacy","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("Pharmacy automation- Pharmacy","OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Pharmacy","Entity");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Pharmacy","Entity");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleOrganisationSequenceForDeliveryChallan() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Delivery Challan","Delivery Challan","Central Hub","Organisation");
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Central Hub","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("CENTRAL HUB 01- Central Hub","Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Central Hub","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("CENTRAL HUB 01- Central Hub","Pharmacy automation- Pharmacy");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Central Hub","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleEntitySequenceForDeliveryChallan() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Delivery Challan","Delivery Challan","Central Hub","Entity");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Central Hub","Entity");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Central Hub","Entity");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("CENTRAL HUB 01- Central Hub","Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Central Hub","Entity");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Central Hub","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("CENTRAL HUB 01- Central Hub","Pharmacy automation- Pharmacy");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Central Hub","Entity");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Central Hub","Entity");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOTStoreModuleOrganisationSequenceForDeliveryChallan() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Delivery Challan","Delivery Challan","OT Store","Organisation");
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","OT Store","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("OT Store- IPD","Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","OT Store","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("OT Store- IPD","Pharmacy automation- Pharmacy");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","OT Store","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMarketingModuleOrganisationSequenceForDeliveryChallan() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Delivery Challan","Delivery Challan","Marketing","Organisation");
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Marketing","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("MarketingStore- Marketing","Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Marketing","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("MarketingStore- Marketing","Pharmacy automation- Pharmacy");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Marketing","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateStationeryHubModuleOrganisationSequenceForDeliveryChallan() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Delivery Challan","Delivery Challan","Stationery","Organisation");
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Stationery","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("StationeryStore- Stationery Store","Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Stationery","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("StationeryStore- Stationery Store","Pharmacy automation- Pharmacy");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Stationery","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateStationeryModuleFacilitySequenceForDeliveryChallan() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Delivery Challan","Delivery Challan","Stationery","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Stationery","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Stationery","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("StationeryStore- Stationery Store","Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Stationery","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Stationery","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("StationeryStore- Stationery Store","Pharmacy automation- Pharmacy");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Stationery","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Stationery","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateHouseKeepingModuleOrganisationSequenceForDeliveryChallan() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Delivery Challan","Delivery Challan","House Keeping","Organisation");
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","House Keeping","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("HouseKeepingStore- House Keeping","Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","House Keeping","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("HouseKeepingStore- House Keeping","Pharmacy automation- Pharmacy");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","House Keeping","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMaintenanceModuleOrganisationSequenceForDeliveryChallan() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Delivery Challan","Delivery Challan","Maintenance","Organisation");
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Maintenance","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("MaintenanceStore- Maintenance","Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Maintenance","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("MaintenanceStore- Maintenance","Pharmacy automation- Pharmacy");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Maintenance","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralModuleOrganisationSequenceForDeliveryChallan() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Delivery Challan","Delivery Challan","Central","Organisation");
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Central","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("CentralStore- Central","Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Central","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreateDeliveryChallan("CentralStore- Central","Pharmacy automation- Pharmacy");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Delivery Challan","Delivery Challan","Central","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleOrganisationSequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Indent Order","Indent Order","Optical","Organisation");
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Optical","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createIndent("OpticalStore- Optical","Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Optical","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createIndent("OpticalStore- Optical","Pharmacy automation- Pharmacy");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Optical","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleFacilitySequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Indent Order","Indent Order","Optical","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Optical","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Optical","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createIndent("OpticalStore- Optical","Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Optical","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Optical","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createIndent("OpticalStore- Optical","Pharmacy automation- Pharmacy");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Optical","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Optical","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleEntitySequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Indent Order","Indent Order","Optical","Entity");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Optical","Entity");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Optical","Entity");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createIndent("OpticalStore- Optical","Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Optical","Entity");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Optical","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createIndent("OpticalStore- Optical","Pharmacy automation- Pharmacy");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Optical","Entity");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Optical","Entity");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleOrganisationSequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Indent Order","Indent Order","Pharmacy","Organisation");
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Pharmacy","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createIndent("Pharmacy automation- Pharmacy","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Pharmacy","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createIndent("Pharmacy automation- Pharmacy","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Pharmacy","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleFacilitySequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Indent Order","Indent Order","Pharmacy","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Pharmacy","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Pharmacy","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createIndent("Pharmacy automation- Pharmacy","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Pharmacy","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Pharmacy","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createIndent("Pharmacy automation- Pharmacy","OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Pharmacy","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Pharmacy","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleEntitySequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Indent Order","Indent Order","Pharmacy","Entity");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Pharmacy","Entity");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Pharmacy","Entity");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createIndent("Pharmacy automation- Pharmacy","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Pharmacy","Entity");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Pharmacy","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createIndent("Pharmacy automation- Pharmacy","OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Pharmacy","Entity");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Pharmacy","Entity");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleOrganisationSequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Indent Order","Indent Order","Central Hub","Organisation");
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Central Hub","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createIndent("CENTRAL HUB 01- Central Hub","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Central Hub","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createIndent("CENTRAL HUB 01- Central Hub","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Central Hub","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOtStoreModuleOrganisationSequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Indent Order","Indent Order","OT Store","Organisation");
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","OT Store","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createIndent("OT Store- IPD","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","OT Store","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createIndent("OT Store- IPD","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","OT Store","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOTStoreModuleRegionSequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Indent Order","Indent Order","OT Store","Region");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","OT Store","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","OT Store","Region");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createIndent("OT Store- IPD","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","OT Store","Region");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","OT Store","Region");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createIndent("OT Store- IPD","OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","OT Store","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","OT Store","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOTStoreModuleEntitySequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Indent Order","Indent Order","OT Store","Entity");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","OT Store","Entity");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","OT Store","Entity");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createIndent("OT Store- IPD","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","OT Store","Entity");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","OT Store","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createIndent("OT Store- IPD","OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","OT Store","Entity");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","OT Store","Entity");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMarketingModuleOrganisationSequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Indent Order","Indent Order","Marketing","Organisation");
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Marketing","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createIndent("MarketingStore- Marketing","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Marketing","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createIndent("MarketingStore- Marketing","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Marketing","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateStationeryModuleOrganisationSequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Indent Order","Indent Order","Stationery","Organisation");
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Stationery","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createIndent("StationeryStore- Stationery Store","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Stationery","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createIndent("StationaryStore- Stationery Store","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Stationery","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateStationeryModuleEntitySequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Indent Order","Indent Order","Stationery","Entity");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Stationery","Entity");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Stationery","Entity");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createIndent("StationeryStore- Stationery Store","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Stationery","Entity");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Stationery","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createIndent("StationaryStore- Stationery Store","OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Stationery","Entity");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Stationery","Entity");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateHouseKeepingModuleOrganisationSequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Indent Order","Indent Order","House Keeping","Organisation");
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","House Keeping","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createIndent("HouseKeepingStore- House Keeping","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","House Keeping","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createIndent("HouseKeepingStore- House Keeping","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","House Keeping","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateHouseKeepingModuleRegionSequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Indent Order","Indent Order","House Keeping","Region");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","House Keeping","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","House Keeping","Region");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createIndent("HouseKeepingStore- House Keeping","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","House Keeping","Region");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","House Keeping","Region");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createIndent("HouseKeepingStore- House Keeping","OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","House Keeping","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","House Keeping","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateHouseKeepingModuleEntitySequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Indent Order","Indent Order","House Keeping","Entity");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","House Keeping","Entity");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","House Keeping","Entity");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createIndent("HouseKeepingStore- House Keeping","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","House Keeping","Entity");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","House Keeping","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createIndent("HouseKeepingStore- House Keeping","OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","House Keeping","Entity");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","House Keeping","Entity");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMaintenanceModuleOrganisationSequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Indent Order","Indent Order","Maintenance","Organisation");
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Maintenance","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createIndent("MaintenanceStore- Maintenance","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Maintenance","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createIndent("MaintenanceStore- Maintenance","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Maintenance","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralModuleOrganisationSequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Indent Order","Indent Order","Central","Organisation");
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","Central","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createIndent("CentralStore- Central","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","CentralCentral","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createIndent("CentralStore- Central","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","CentralCentral","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralModuleRegionSequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Indent Order","Indent Order","CentralCentral","Region");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","CentralCentral","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","CentralCentral","Region");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createIndent("CentralStore- Central","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","CentralCentral","Region");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","CentralCentral","Region");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createIndent("CentralStore- Central","OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","CentralCentral","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","CentralCentral","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralModuleEntitySequenceForIndentOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Indent Order","Indent Order","CentralCentral","Entity");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","CentralCentral","Entity");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","CentralCentral","Entity");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createIndent("CentralStore- Central","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","CentralCentral","Entity");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","CentralCentral","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createIndent("CentralStore- Central","OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","CentralCentral","Entity");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Indent Order","Indent Order","CentralCentral","Entity");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpdModuleOrganisationSequenceForBillNumber() {
        Page_OPD oPage_OPD = new Page_OPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Invoice","Bill Number","OPD","Organisation");
                getExistingSequenceNumberForCounter("Invoice","Bill Number","OPD","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                String concatPatientFullName = CommonActions.getFullPatientName(myPatient).toUpperCase().trim();
                boolean patientSelectedOPD = CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                }
                Cls_Generic_Methods.customWait();


                String advanceId = SequenceCommonActions.createBill();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Bill Number Sequence Displayed correctly as its increasing by one counter "+advanceId);
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Invoice","Bill Number","OPD","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                m_assert.assertTrue("Previous Sequence Was : "+existingSequenceNumber.get(indexOfFirstSequence));
                m_assert.assertTrue("New Sequence Is : "+newSequence);

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Invoice","Bill Number","OPD","Organisation");
                indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                patientSelectedOPD = CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    Cls_Generic_Methods.customWait();
                }

                advanceId = SequenceCommonActions.createBill();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Bill Number Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Invoice","Bill Number","OPD","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Bill on facility level "+newSequence);

                m_assert.assertTrue("Previous Sequence Was : "+existingSequenceNumber.get(indexOfSecondSequence));
                m_assert.assertTrue("New Sequence Is : "+newSequence);

            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpdModuleFacilitySequenceForBillNumber() {
        Page_OPD oPage_OPD = new Page_OPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Invoice","Bill Number","OPD","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Invoice","Bill Number","OPD","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Invoice","Bill Number","OPD","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                String concatPatientFullName = CommonActions.getFullPatientName(myPatient).toUpperCase().trim();
                boolean patientSelectedOPD = CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                }
                Cls_Generic_Methods.customWait();


                String advanceId = SequenceCommonActions.createBill();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Invoice","Bill Number","OPD","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Invoice","Bill Number","OPD","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                patientSelectedOPD = CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    Cls_Generic_Methods.customWait();
                }

                advanceId = SequenceCommonActions.createBill();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Invoice","Bill Number","OPD","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Invoice","Bill","OPD","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateIpdModuleOrganisationSequenceForBillNumber() {
        Page_IPD oPage_IPD = new Page_IPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Invoice","Bill Number","IPD","Organisation");
                getExistingSequenceNumberForCounter("Invoice","Bill Number","IPD","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("IPD");
                Cls_Generic_Methods.customWait();
                String concatPatientFullName = CommonActions.getFullPatientName(myPatient).toUpperCase().trim();
                boolean patientSelectedOPD = CommonActions.selectPatientNameInIpd(oPage_IPD.rows_patientNamesOnIPD, concatPatientFullName);;

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    scheduleAdmissionFromOPD();
                }
                Cls_Generic_Methods.customWait();


                String advanceId = SequenceCommonActions.createBill();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Invoice","Bill Number","IPD","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                CommonActions.selectDepartmentOnApp("IPD");
                Cls_Generic_Methods.customWait();
                patientSelectedOPD = CommonActions.selectPatientNameInIpd(oPage_IPD.rows_patientNamesOnIPD, concatPatientFullName);;

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    scheduleAdmissionFromOPD();
                }

                advanceId = SequenceCommonActions.createBill();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Invoice","Bill Number","IPD","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleOrganisationSequenceForBillNumber() {
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);


        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Invoice","Bill Number","Optical","Organisation");
                getExistingSequenceNumberForCounter("Invoice","Bill Number","Optical","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                SequenceCommonActions.validateSaleTransactionFunctionality("OpticalStore- Optical");
                Cls_Generic_Methods.customWait();
                String advanceId = Cls_Generic_Methods.getTextInElement(oPage_CommonElements.text_billNumberInStore).trim();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Invoice","Bill Number","Optical","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Invoice","Bill Number","Optical","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                SequenceCommonActions.validateSaleTransactionFunctionality("OpticalStore- Optical");
                Cls_Generic_Methods.customWait();

                advanceId = Cls_Generic_Methods.getTextInElement(oPage_CommonElements.text_billNumberInStore).trim();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Invoice","Bill Number","Optical","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleOrganisationSequenceForBillNumber() {
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Invoice","Bill Number","Pharmacy","Organisation");
                getExistingSequenceNumberForCounter("Invoice","Bill Number","Pharmacy","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                SequenceCommonActions.validatePharmacySaleTransactionFunctionality("Pharmacy automation- Pharmacy");
                Cls_Generic_Methods.customWait();
                String advanceId = Cls_Generic_Methods.getTextInElement(oPage_CommonElements.text_billNumberInStore).trim();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Invoice","Bill Number","Pharmacy","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Invoice","Bill Number","Pharmacy","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                SequenceCommonActions.validatePharmacySaleTransactionFunctionality("Pharmacy automation- Pharmacy");
                Cls_Generic_Methods.customWait();

                advanceId = Cls_Generic_Methods.getTextInElement(oPage_CommonElements.text_billNumberInStore).trim();

                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Invoice","Bill Number","Pharmacy","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateModuleOrganisationSequenceForPatientDisplayID() {
        Page_PatientAppointmentDetails oPage_PatientAppointmentDetails = new Page_PatientAppointmentDetails(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Patient","Patient Display ID","-","Organisation");
                getExistingSequenceNumberForCounter("Patient","Patient Display ID","-","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();
                Cls_Generic_Methods.customWait();


                String appointmentId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_patientID);
                String newSequence = "";

                for(int i = 0;i<appointmentId.toCharArray().length;i++){
                    if(appointmentId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+appointmentId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = appointmentId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(appointmentId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+appointmentId);

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Patient","Patient Display ID","-","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();
                Cls_Generic_Methods.customWait();

                appointmentId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_patientID);

                newSequence = "";
                for(int i = 0;i<appointmentId.toCharArray().length;i++){
                    if(appointmentId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+appointmentId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = appointmentId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(appointmentId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+appointmentId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Patient","Patient Display ID","OPD","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateModuleFacilitySequenceForPatientDisplayID() {
        Page_PatientAppointmentDetails oPage_PatientAppointmentDetails = new Page_PatientAppointmentDetails(driver);


        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Patient","Patient Display ID","-","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Patient","Patient Display ID","-","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Patient","Patient Display ID","-","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();

                Cls_Generic_Methods.customWait();


                String appointmentId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_patientID);
                String newSequence = "";

                for(int i = 0;i<appointmentId.toCharArray().length;i++){
                    if(appointmentId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+appointmentId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = appointmentId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(appointmentId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+appointmentId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Patient","Patient Display ID","-","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Patient","Patient Display ID","-","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();
                Cls_Generic_Methods.customWait();

                appointmentId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_patientID);

                newSequence = "";
                for(int i = 0;i<appointmentId.toCharArray().length;i++){
                    if(appointmentId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+appointmentId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = appointmentId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(appointmentId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+appointmentId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Patient","Patient Display ID","-","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Patient","Patient Display ID","-","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateModuleRegionSequenceForPatientDisplayID() {
        Page_PatientAppointmentDetails oPage_PatientAppointmentDetails = new Page_PatientAppointmentDetails(driver);


        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Patient","Patient Display ID","-","Region");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Patient","Patient Display ID","-","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Patient","Patient Display ID","-","Region");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();

                Cls_Generic_Methods.customWait();


                String appointmentId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_patientID);
                String newSequence = "";

                for(int i = 0;i<appointmentId.toCharArray().length;i++){
                    if(appointmentId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+appointmentId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = appointmentId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(appointmentId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+appointmentId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Patient","Patient Display ID","-","Region");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Patient","Patient Display ID","-","Region");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                createPatientToValidatePatientInventoryFollow();
                Cls_Generic_Methods.customWait();

                appointmentId = Cls_Generic_Methods.getTextInElement(oPage_PatientAppointmentDetails.text_patientID);

                newSequence = "";
                for(int i = 0;i<appointmentId.toCharArray().length;i++){
                    if(appointmentId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+appointmentId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = appointmentId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(appointmentId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+appointmentId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Patient","Patient Display ID","-","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Patient","Patient Display ID","-","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleOrganisationSequenceForPRF() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Prf","PRF","Optical","Organisation");
                getExistingSequenceNumberForCounter("Prf","PRF","Optical","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Prf","PRF","Optical","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Optical","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleFacilitySequenceForPRF() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Prf","PRF","Optical","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Optical","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Optical","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Optical","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Prf","PRF","Optical","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Optical","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Optical","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleOrganisationSequenceForPRF() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Prf","PRF","Pharmacy","Organisation");
                getExistingSequenceNumberForCounter("Prf","PRF","Pharmacy","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Prf","PRF","Pharmacy","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("Pharmacy automation- Pharmacy");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Pharmacy","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleOrganisationSequenceForPRF() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Prf","PRF","Central Hub","Organisation");
                getExistingSequenceNumberForCounter("Prf","PRF","Central Hub","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("CENTRAL HUB 01- Central Hub");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Prf","PRF","Central Hub","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("CENTRAL HUB 01- Central Hub");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Central Hub","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleEntitySequenceForPRF() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Prf","PRF","Central Hub","Entity");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Central Hub","Entity");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Central Hub","Entity");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("CENTRAL HUB 01- Central Hub");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Central Hub","Entity");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Prf","PRF","Central Hub","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("CENTRAL HUB 01- Central Hub");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Central Hub","Entity");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Central Hub","Entity");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOTStoreModuleOrganisationSequenceForPRF() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Prf","PRF","OT Store","Organisation");
                getExistingSequenceNumberForCounter("Prf","PRF","OT Store","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("OT Store- IPD");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Prf","PRF","OT Store","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("OT Store- IPD");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","OT Store","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMarketingModuleOrganisationSequenceForPRF() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Prf","PRF","Marketing","Organisation");
                getExistingSequenceNumberForCounter("Prf","PRF","Marketing","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("MarketingStore- Marketing");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Prf","PRF","Marketing","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("MarketingStore- Marketing");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Marketing","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateStationeryModuleOrganisationSequenceForPRF() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Prf","PRF","Stationery","Organisation");
                getExistingSequenceNumberForCounter("Prf","PRF","Stationery","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("StationeryStore- Stationery");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Prf","PRF","Stationery","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("StationeryStore- Stationery");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Stationery","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateHouseKeepingModuleOrganisationSequenceForPRF() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Prf","PRF","House Keeping","Organisation");
                getExistingSequenceNumberForCounter("Prf","PRF","House Keeping","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("HouseKeepingStore- House Keeping");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Prf","PRF","House Keeping","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("HouseKeepingStore- House Keeping");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","House Keeping","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMaintenanceModuleOrganisationSequenceForPRF() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Prf","PRF","Maintenance","Organisation");
                getExistingSequenceNumberForCounter("Prf","PRF","Maintenance","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("MaintenanceStore- Maintenance");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Prf","PRF","Maintenance","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("MaintenanceStore- Maintenance");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Maintenance","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralModuleOrganisationSequenceForPRF() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Prf","PRF","Central","Organisation");
                getExistingSequenceNumberForCounter("Prf","PRF","Central","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("CentralStore- Central");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Prf","PRF","Central","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePaymentRequisitionForm("CentralStore- Central");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Prf","PRF","Central","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleOrganisationSequenceForPurchaseBill() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Bill","Purchase Bill","Optical","Organisation");
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Optical","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePurchaseBill("OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Optical","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePurchaseBill("OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Optical","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleFacilitySequenceForPurchaseBill() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Purchase Bill","Purchase Bill","Optical","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Optical","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Optical","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validateCreatePurchaseBill("OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Optical","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Optical","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validateCreatePurchaseBill("OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Optical","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Optical","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleOrganisationSequenceForPurchaseBill() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Bill","Purchase Bill","Pharmacy","Organisation");
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Pharmacy","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePurchaseBill("Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Pharmacy","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePurchaseBill("Pharmacy automation- Pharmacy");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Pharmacy","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleFacilitySequenceForPurchaseBill() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Purchase Bill","Purchase Bill","Pharmacy","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Pharmacy","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Pharmacy","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validateCreatePurchaseBill("Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Pharmacy","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Prf","PRF","Pharmacy","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validateCreatePurchaseBill("Pharmacy automation- Pharmacy");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Pharmacy","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Pharmacy","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleOrganisationSequenceForPurchaseBill() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Bill","Purchase Bill","Central Hub","Organisation");
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Central Hub","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePurchaseBill("CENTRAL HUB 01- Central Hub");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Central Hub","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePurchaseBill("CENTRAL HUB 01- Central Hub");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Central Hub","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleEntitySequenceForPurchaseBill() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Purchase Bill","Purchase Bill","Central Hub","Entity");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Central Hub","Entity");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Central Hub","Entity");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validateCreatePurchaseBill("CENTRAL HUB 01- Central Hub");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Central Hub","Entity");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Prf","PRF","Central Hub","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validateCreatePurchaseBill("CENTRAL HUB 01- Central Hub");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Central Hub","Entity");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Central Hub","Entity");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOTStoreModuleOrganisationSequenceForPurchaseBill() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Bill","Purchase Bill","OT Store","Organisation");
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","OT Store","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePurchaseBill("OT Store- IPD");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","OT Store","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePurchaseBill("OT Store- IPD");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","OT Store","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMarketingModuleOrganisationSequenceForPurchaseBill() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Bill","Purchase Bill","Marketing","Organisation");
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Marketing","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePurchaseBill("MarketingStore- Marketing");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Marketing","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePurchaseBill("MarketingStore- Marketing");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Marketing","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateStationeryModuleOrganisationSequenceForPurchaseBill() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Bill","Purchase Bill","Stationery","Organisation");
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Stationery","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePurchaseBill("StationeryStore- Stationery");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Stationery","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePurchaseBill("StationeryStore- Stationery");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Stationery","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateHouseKeepingModuleOrganisationSequenceForPurchaseBill() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Bill","Purchase Bill","House Keeping","Organisation");
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","House Keeping","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePurchaseBill("HouseKeepingStore- House Keeping");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","House Keeping","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePurchaseBill("HouseKeepingStore- House Keeping");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","House Keeping","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMaintenanceModuleOrganisationSequenceForPurchaseBill() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Bill","Purchase Bill","Maintenance","Organisation");
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Maintenance","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePurchaseBill("MaintenanceStore- Maintenance");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Maintenance","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePurchaseBill("MaintenanceStore- Maintenance");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Maintenance","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralModuleOrganisationSequenceForPurchaseBill() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Bill","Purchase Bill","Central","Organisation");
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Central","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validateCreatePurchaseBill("CentralStore- Central");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Central","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validateCreatePurchaseBill("CentralStore- Central");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Bill","Purchase Bill","Central","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleOrganisationSequenceForPurchaseOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Order","Purchase Order","Optical","Organisation");
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Optical","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Optical","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Optical","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleFacilitySequenceForPurchaseOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Purchase Order","Purchase Order","Optical","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Optical","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Optical","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Optical","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Optical","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Optical","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Optical","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleOrganisationSequenceForPurchaseOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Order","Purchase Order","Pharmacy","Organisation");
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Pharmacy","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Pharmacy","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("Pharmacy automation- Pharmacy");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Pharmacy","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleOrganisationSequenceForPurchaseOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Order","Purchase Order","Central Hub","Organisation");
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central Hub","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("CENTRAL HUB 01- Central Hub");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central Hub","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("CENTRAL HUB 01- Central Hub");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central Hub","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleFacilitySequenceForPurchaseOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Purchase Order","Purchase Order","Central Hub","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central Hub","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central Hub","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("CENTRAL HUB 01- Central Hub");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central Hub","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central Hub","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("CENTRAL HUB 01- Central Hub");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central Hub","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central Hub","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleEntitySequenceForPurchaseOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Purchase Order","Purchase Order","Central Hub","Entity");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central Hub","Entity");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central Hub","Entity");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("CENTRAL HUB 01- Central Hub");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central Hub","Entity");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central Hub","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("CENTRAL HUB 01- Central Hub");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central Hub","Entity");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central Hub","Entity");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOTStoreModuleOrganisationSequenceForPurchaseOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Order","Purchase Order","OT Store","Organisation");
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","OT Store","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("OT Store- IPD");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","OT Store","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("OT Store- IPD");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","OT Store","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOTStoreModuleRegionSequenceForPurchaseOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Purchase Order","Purchase Order","OT Store","Region");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","OT Store","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","OT Store","Region");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("OT Store- IPD");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","OT Store","Region");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","OT Store","Region");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("OT Store- IPD");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","OT Store","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","OT Store","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMarketingModuleOrganisationSequenceForPurchaseOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Order","Purchase Order","Marketing","Organisation");
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Marketing","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("MarketingStore- Marketing");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Marketing","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("MarketingStore- Marketing");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Marketing","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateStationeryModuleOrganisationSequenceForPurchaseOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Order","Purchase Order","Stationery","Organisation");
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Stationery","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("StationeryStore- Stationery");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Stationery","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("StationeryStore- Stationery");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Stationery","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateHouseKeepingModuleOrganisationSequenceForPurchaseOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Order","Purchase Order","House Keeping","Organisation");
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","House Keeping","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("HouseKeepingStore- House Keeping");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","House Keeping","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("HouseKeepingStore- House Keeping");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","House Keeping","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMaintenanceModuleOrganisationSequenceForPurchaseOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Order","Purchase Order","Maintenance","Organisation");
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Maintenance","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("MaintenanceStore- Maintenance");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Maintenance","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("MaintenanceStore- Maintenance");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Maintenance","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralModuleOrganisationSequenceForPurchaseOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Order","Purchase Order","Central","Organisation");
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("CentralStore- Central");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("CentralStore- Central");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralModuleRegionSequenceForPurchaseOrder() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Purchase Order","Purchase Order","Central","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("Central Store- Central");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validatePurchaseOrderCreation("CentralStore- Central");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Order","Purchase Order","Central","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleOrganisationSequenceForPurchaseReturn() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Return Transaction","Purchase Return","Optical","Organisation");
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Optical","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Optical","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Optical","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleFacilitySequenceForPurchaseReturn() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Purchase Return Transaction","Purchase Return","Optical","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Optical","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Optical","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Optical","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Optical","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Optical","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Optical","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleEntitySequenceForPurchaseReturn() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Purchase Return Transaction","Purchase Return","Optical","Entity");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Optical","Entity");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Optical","Entity");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Optical","Entity");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Optical","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Optical","Entity");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Optical","Entity");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleOrganisationSequenceForPurchaseReturn() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Return Transaction","Purchase Return","Pharmacy","Organisation");
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Pharmacy","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Pharmacy","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("Pharmacy automation- Pharmacy");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Pharmacy","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleEntitySequenceForPurchaseReturn() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Purchase Return Transaction","Purchase Return","Pharmacy","Entity");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Pharmacy","Entity");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Pharmacy","Entity");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Pharmacy","Entity");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Pharmacy","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("Pharmacy automation- Pharmacy");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Pharmacy","Entity");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Pharmacy","Entity");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleOrganisationSequenceForPurchaseReturn() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Return Transaction","Purchase Return","Central Hub","Organisation");
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Central Hub","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("CENTRAL HUB 01- Central Hub");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Central Hub","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("CENTRAL HUB 01- Central Hub");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Central Hub","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOTStoreModuleOrganisationSequenceForPurchaseReturn() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Return Transaction","Purchase Return","OT Store","Organisation");
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","OT Store","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("OT Store- IPD");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","OT Store","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("OT Store- IPD");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","OT Store","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMarketingModuleOrganisationSequenceForPurchaseReturn() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Return Transaction","Purchase Return","Marketing","Organisation");
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Marketing","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("MarketingStore- Marketing");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Marketing","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("MarketingStore- Marketing");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Marketing","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateStationeryModuleOrganisationSequenceForPurchaseReturn() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Return Transaction","Purchase Return","Stationery","Organisation");
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Stationery","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("StationeryStore- Stationery");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Stationery","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("StationeryStore- Stationery");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Stationery","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateHouseKeepingModuleOrganisationSequenceForPurchaseReturn() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Return Transaction","Purchase Return","House Keeping","Organisation");
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","House Keeping","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("HouseKeepingStore- House Keeping");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","House Keeping","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("HouseKeepingStore- House Keeping");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","House Keeping","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMaintenanceModuleOrganisationSequenceForPurchaseReturn() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Return Transaction","Purchase Return","Maintenance","Organisation");
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Maintenance","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("MaintenanceStore- Maintenance");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Maintenance","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("MaintenanceStore- Maintenance");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Maintenance","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralModuleOrganisationSequenceForPurchaseReturn() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Return Transaction","Purchase Return","Central","Organisation");
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Central","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("CentralStore- Central");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Central","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransactionForReturn("CentralStore- Central");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Return Transaction","Purchase Return","Central","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }


    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleOrganisationSequenceForPurchaseTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Transaction","Purchase","Optical","Organisation");
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Optical","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransaction("OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Optical","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransaction("OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Optical","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleOrganisationSequenceForPurchaseTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Transaction","Purchase","Pharmacy","Organisation");
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Pharmacy","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransaction("Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Pharmacy","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransaction("Pharmacy automation- Pharmacy");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Pharmacy","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleRegionSequenceForPurchaseTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Purchase Transaction","Purchase","Pharmacy","Region");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Pharmacy","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Pharmacy","Region");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createPurchaseTransaction("Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Pharmacy","Region");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Pharmacy","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransaction("Pharmacy automation- Pharmacy");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Pharmacy","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Pharmacy","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleOrganisationSequenceForPurchaseTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Transaction","Purchase","Central Hub","Organisation");
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central Hub","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransaction("CENTRAL HUB 01- Central Hub");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central Hub","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransaction("CENTRAL HUB 01- Central Hub");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central Hub","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleRegionSequenceForPurchaseTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Purchase Transaction","Purchase","Central Hub","Region");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central Hub","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central Hub","Region");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createPurchaseTransaction("CENTRAL HUB 01- Central Hub");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central Hub","Region");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central Hub","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransaction("CENTRAL HUB 01- Central Hub");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central Hub","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central Hub","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOTStoreModuleOrganisationSequenceForPurchaseTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Transaction","Purchase","OT Store","Organisation");
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","OT Store","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransaction("OT Store- IPD");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","OT Store","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransaction("OT Store- IPD");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","OT Store","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMarketingModuleOrganisationSequenceForPurchaseTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Transaction","Purchase","Marketing","Organisation");
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Marketing","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransaction("MarketingStore- Marketing");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Marketing","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransaction("MarketingStore- Marketing");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Marketing","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateStationeryModuleOrganisationSequenceForPurchaseTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Transaction","Purchase","Stationery","Organisation");
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Stationery","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransaction("StationeryStore- Stationery");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Stationery","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransaction("StationeryStore- Stationery");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Stationery","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateHouseKeepingModuleOrganisationSequenceForPurchaseTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Transaction","Purchase","House Keeping","Organisation");
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","House Keeping","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransaction("HouseKeepingStore- House Keeping");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","House Keeping","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransaction("HouseKeepingStore- House Keeping");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","House Keeping","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMaintenanceModuleOrganisationSequenceForPurchaseTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Transaction","Purchase","Maintenance","Organisation");
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Maintenance","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransaction("MaintenanceStore- Maintenance");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Maintenance","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransaction("MaintenanceStore- Maintenance");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Maintenance","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralModuleOrganisationSequenceForPurchaseTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Purchase Transaction","Purchase","Central","Organisation");
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createPurchaseTransaction("CentralStore- Central");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase Return","Central","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransaction("CentralStore- Central");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralModuleRegionSequenceForPurchaseTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Purchase Transaction","Purchase","Central","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createPurchaseTransaction("Central Store- Central");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createPurchaseTransaction("CentralStore- Central");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Purchase Transaction","Purchase","Central","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }


    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleOrganisationSequenceForReceiveTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Receive Transaction","Receive Transaction","Optical","Organisation");
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Optical","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createReceive("OpticalStore- Optical","Pharmacy automation- Pharmacy");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Optical","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createReceive("OpticalStore- Optical","Pharmacy automation- Pharmacy");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Optical","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleOrganisationSequenceForReceiveTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Receive Transaction","Receive","Pharmacy","Organisation");
                getExistingSequenceNumberForCounter("Receive Transaction","Receive","Pharmacy","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createReceive("Pharmacy automation- Pharmacy","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Pharmacy","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createReceive("Pharmacy automation- Pharmacy","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Pharmacy","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleEntitySequenceForReceiveTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Receive Transaction","Receive","Pharmacy","Entity");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Receive Transaction","Receive","Pharmacy","Entity");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Receive Transaction","Receive","Pharmacy","Entity");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.createReceive("Pharmacy automation- Pharmacy","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Pharmacy","Entity");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Pharmacy","Entity");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createReceive("Pharmacy automation- Pharmacy","OpticalStore- Optical");


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Pharmacy","Entity");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Pharmacy","Entity");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleOrganisationSequenceForReceiveTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Receive Transaction","Receive Transaction","Central Hub","Organisation");
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Central Hub","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createReceive("CENTRAL HUB 01- Central Hub","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Central Hub","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createReceive("CENTRAL HUB 01- Central Hub","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Central Hub","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOTStoreModuleOrganisationSequenceForReceiveTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Receive Transaction","Receive Transaction","OT Store","Organisation");
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","OT Store","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createReceive("OT Store- IPD","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","OT Store","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createReceive("OT Store- IPD","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","OT Store","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMarketingModuleOrganisationSequenceForReceiveTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Receive Transaction","Receive Transaction","Marketing","Organisation");
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Marketing","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createReceive("MarketingStore- Marketing","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Marketing","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createReceive("MarketingStore- Marketing","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Marketing","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateStationeryModuleOrganisationSequenceForReceiveTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Receive Transaction","Receive Transaction","Stationery","Organisation");
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Stationery","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createReceive("StationeryStore- Stationery","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Stationery","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createReceive("StationeryStore- Stationery","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Stationery","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateHouseKeepingModuleOrganisationSequenceForReceiveTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Receive Transaction","Receive Transaction","House Keeping","Organisation");
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","House Keeping","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createReceive("HouseKeepingStore- House Keeping","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","House Keeping","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createReceive("HouseKeepingStore- House Keeping","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","House Keeping","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMaintenanceModuleOrganisationSequenceForReceiveTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Receive Transaction","Receive Transaction","Maintenance","Organisation");
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Maintenance","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createReceive("MaintenanceStore- Maintenance","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Maintenance","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createReceive("MaintenanceStore- Maintenance","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Maintenance","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralModuleOrganisationSequenceForReceiveTransaction() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Receive Transaction","Receive Transaction","Central","Organisation");
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Central","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String deliveryId = SequenceCommonActions.createReceive("CentralStore- Central","OpticalStore- Optical");
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Return","Central","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                deliveryId = SequenceCommonActions.createReceive("CentralStore- Central","OpticalStore- Optical");

                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Receive Transaction","Receive Transaction","Central","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }


    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpdModuleOrganisationSequenceForRefundId() {
        Page_OPD oPage_OPD = new Page_OPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Refund Payment","Refund Display ID","OPD","Organisation");
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","OPD","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                String concatPatientFullName = CommonActions.getFullPatientName(myPatient).toUpperCase().trim();
                boolean patientSelectedOPD = CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                }
                Cls_Generic_Methods.customWait();


                String advanceRefundId = SequenceCommonActions.createRefund("Advance");
                String billRefundId = SequenceCommonActions.createRefund("Bill");

                String newSequence = "";
                String newSequenceBill = "";

                for(int i = 0;i<advanceRefundId.toCharArray().length;i++){
                    if(advanceRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                for(int i = 0;i<billRefundId.toCharArray().length;i++){
                    if(advanceRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequenceBill = newSequenceBill+billRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = billRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequenceBill = newSequenceBill+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceRefundId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceRefundId);
                m_assert.assertTrue(billRefundId.equalsIgnoreCase(newSequenceBill),
                        " Bill Id Sequence Displayed correctly as its increasing by one counter "+billRefundId);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","OPD","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                patientSelectedOPD = CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    Cls_Generic_Methods.customWait();
                }

                advanceRefundId = SequenceCommonActions.createRefund("Advance");
                billRefundId = SequenceCommonActions.createRefund("Bill");

                newSequence = "";
                newSequenceBill = "";
                for(int i = 0;i<advanceRefundId.toCharArray().length;i++){
                    if(advanceRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                for(int i = 0;i<billRefundId.toCharArray().length;i++){
                    if(billRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequenceBill = newSequenceBill+billRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = billRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequenceBill = newSequenceBill+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceRefundId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceRefundId);

                m_assert.assertTrue(billRefundId.equalsIgnoreCase(newSequenceBill),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceRefundId);


                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","OPD","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateIpdModuleOrganisationSequenceForRefundId() {
        Page_IPD oPage_IPD = new Page_IPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Refund Payment","Refund Display ID","IPD","Organisation");
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","IPD","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("IPD");
                Cls_Generic_Methods.customWait();
                String concatPatientFullName = CommonActions.getFullPatientName(myPatient).toUpperCase().trim();
                boolean patientSelectedOPD = CommonActions.selectPatientNameInIpd(oPage_IPD.rows_patientNamesOnIPD, concatPatientFullName);

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    scheduleAdmissionFromOPD();
                }
                Cls_Generic_Methods.customWait();


                String advanceRefundId = SequenceCommonActions.createRefund("Advance");
                String billRefundId = SequenceCommonActions.createRefund("Bill");

                String newSequence = "";
                String newSequenceBill = "";

                for(int i = 0;i<advanceRefundId.toCharArray().length;i++){
                    if(advanceRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                for(int i = 0;i<billRefundId.toCharArray().length;i++){
                    if(advanceRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequenceBill = newSequenceBill+billRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = billRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequenceBill = newSequenceBill+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceRefundId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceRefundId);
                m_assert.assertTrue(billRefundId.equalsIgnoreCase(newSequenceBill),
                        " Bill Id Sequence Displayed correctly as its increasing by one counter "+billRefundId);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","IPD","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);

                CommonActions.selectDepartmentOnApp("IPD");
                Cls_Generic_Methods.customWait();
                patientSelectedOPD = CommonActions.selectPatientNameInIpd(oPage_IPD.rows_patientNamesOnIPD, concatPatientFullName);

                advanceRefundId = SequenceCommonActions.createRefund("Advance");
                billRefundId = SequenceCommonActions.createRefund("Bill");

                newSequence = "";
                newSequenceBill = "";
                for(int i = 0;i<advanceRefundId.toCharArray().length;i++){
                    if(advanceRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                for(int i = 0;i<billRefundId.toCharArray().length;i++){
                    if(billRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequenceBill = newSequenceBill+billRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = billRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequenceBill = newSequenceBill+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceRefundId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceRefundId);

                m_assert.assertTrue(billRefundId.equalsIgnoreCase(newSequenceBill),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceRefundId);


                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","IPD","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateIpdModuleFacilitySequenceForRefundId() {
        Page_IPD oPage_IPD = new Page_IPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault("Refund Payment","Refund Display ID","IPD","Facility");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","IPD","Facility");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","IPD","Facility");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectDepartmentOnApp("OPD");
                Cls_Generic_Methods.customWait();
                String concatPatientFullName = CommonActions.getFullPatientName(myPatient).toUpperCase().trim();
                boolean patientSelectedOPD = CommonActions.selectPatientNameInIpd(oPage_IPD.rows_patientNamesOnIPD, concatPatientFullName);

                if(!patientSelectedOPD) {
                    createPatientToValidatePatientInventoryFollow();
                    scheduleAdmissionFromOPD();
                }
                Cls_Generic_Methods.customWait();


                String advanceRefundId = SequenceCommonActions.createRefund("Advance");
                String billRefundId   = SequenceCommonActions.createRefund("Bill");
                String newSequence = "";
                String newSequenceBill = "";

                for(int i = 0;i<advanceRefundId.toCharArray().length;i++){
                    if(advanceRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                for(int i = 0;i<billRefundId.toCharArray().length;i++){
                    if(billRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequenceBill = newSequenceBill+billRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = billRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequenceBill = newSequenceBill+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceRefundId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceRefundId);

                m_assert.assertTrue(billRefundId.equalsIgnoreCase(newSequenceBill),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+newSequenceBill);


                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","IPD","Facility");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","IPD","Facility");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                CommonActions.selectDepartmentOnApp("IPD");
                Cls_Generic_Methods.customWait();
                patientSelectedOPD = CommonActions.selectPatientNameInOpd(oPage_IPD.rows_patientNamesOnIPD, concatPatientFullName);


                 advanceRefundId = SequenceCommonActions.createRefund("Advance");
                 billRefundId   = SequenceCommonActions.createRefund("Bill");
                 newSequence = "";
                 newSequenceBill = "";

                for(int i = 0;i<advanceRefundId.toCharArray().length;i++){
                    if(advanceRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                for(int i = 0;i<billRefundId.toCharArray().length;i++){
                    if(billRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequenceBill = newSequenceBill+billRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = billRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequenceBill = newSequenceBill+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceRefundId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceRefundId);

                m_assert.assertTrue(billRefundId.equalsIgnoreCase(newSequenceBill),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+newSequenceBill);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","IPD","Facility");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","IPD","Facility");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleOrganisationSequenceForRefundID() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Refund Payment","Refund Display ID","Optical","Organisation");
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","Optical","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                SequenceCommonActions.validateSaleTransactionFunctionality("OpticalStore- Optical");
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.returnBill();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","Optical","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","Optical","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                SequenceCommonActions.validateSaleTransactionFunctionality("OpticalStore- Optical");
                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.returnBill();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","Optical","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleOrganisationSequenceForRefundID() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault("Refund Payment","Refund Display ID","Pharmacy","Organisation");
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","Pharmacy","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                SequenceCommonActions.validateSaleTransactionFunctionality("Pharmacy automation- Pharmacy");
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.returnBill();
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","Pharmacy","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","Pharmacy","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                SequenceCommonActions.validateSaleTransactionFunctionality("Pharmacy automation- Pharmacy");
                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.returnBill();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter("Refund Payment","Refund Display ID","Pharmacy","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubToCentralHubOrganisationSequenceForRequisition() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Requisition Central Hub To Central Hub";
            String centralHub = "CENTRAL HUB 01- Central Hub";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,moduleName,"-","Organisation");
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                String requisitionId = SequenceCommonActions.createRequisitionInStore(centralHub,centralHub);
                String newSequence = "";

                for(int i = 0;i<requisitionId.toCharArray().length;i++){
                    if(requisitionId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+requisitionId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = requisitionId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(requisitionId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+requisitionId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                requisitionId = SequenceCommonActions.createRequisitionInStore(centralHub,centralHub);

                newSequence = "";
                for(int i = 0;i<requisitionId.toCharArray().length;i++){
                    if(requisitionId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+requisitionId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = requisitionId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(requisitionId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+requisitionId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubToCentralHubRegionSequenceForRequisition() {
        Page_IPD oPage_IPD = new Page_IPD(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Requisition Central Hub To Central Hub";
            String centralHub = "CENTRAL HUB 01- Central Hub";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault(moduleName,moduleName,"-","Region");
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Region");
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Region");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String advanceRefundId = SequenceCommonActions.createRequisitionInStore(centralHub,centralHub);
                String newSequence = "";


                for(int i = 0;i<advanceRefundId.toCharArray().length;i++){
                    if(advanceRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }



                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceRefundId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceRefundId);


                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Region");

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Region");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                advanceRefundId = SequenceCommonActions.createRequisitionInStore(centralHub,centralHub);
                newSequence = "";

                for(int i = 0;i<advanceRefundId.toCharArray().length;i++){
                    if(advanceRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceRefundId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceRefundId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Region");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Region");
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubToFacilityStoreOrganisationSequenceForRequisition() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Requisition Central Hub To Facility Store";
            String centralHub = "CENTRAL HUB 01- Central Hub";
            String facilityStore = "Pharmacy automation- Pharmacy";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,moduleName,"-","Organisation");
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                String requisitionId = SequenceCommonActions.createRequisitionInStore(centralHub,facilityStore);
                String newSequence = "";

                for(int i = 0;i<requisitionId.toCharArray().length;i++){
                    if(requisitionId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+requisitionId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = requisitionId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(requisitionId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+requisitionId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                requisitionId = SequenceCommonActions.createRequisitionInStore(centralHub,facilityStore);

                newSequence = "";
                for(int i = 0;i<requisitionId.toCharArray().length;i++){
                    if(requisitionId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+requisitionId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = requisitionId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(requisitionId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+requisitionId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubToFacilityStoreFacilitySequenceForRequisition() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Requisition Central Hub To Facility Store";
            String centralHub = "CENTRAL HUB 01- Central Hub";
            String facilityStore = "Pharmacy automation- Pharmacy";
            String property = "Facility";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault(moduleName,moduleName,"-",property);
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-",property);
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-",property);
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String advanceRefundId = SequenceCommonActions.createRequisitionInStore(centralHub,facilityStore);
                String newSequence = "";


                for(int i = 0;i<advanceRefundId.toCharArray().length;i++){
                    if(advanceRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }



                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceRefundId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceRefundId);


                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-",property);

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-",property);
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                advanceRefundId = SequenceCommonActions.createRequisitionInStore(centralHub,facilityStore);
                newSequence = "";

                for(int i = 0;i<advanceRefundId.toCharArray().length;i++){
                    if(advanceRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceRefundId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceRefundId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-",property);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-",property);
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateFacilityToCentralHubStoreOrganisationSequenceForRequisition() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Requisition Facility Store To Central Hub";
            String centralHub = "CENTRAL HUB 01- Central Hub";
            String facilityStore = "Pharmacy automation- Pharmacy";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,moduleName,"-","Organisation");
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                String requisitionId = SequenceCommonActions.createRequisitionInStore(facilityStore,centralHub);
                String newSequence = "";

                for(int i = 0;i<requisitionId.toCharArray().length;i++){
                    if(requisitionId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+requisitionId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = requisitionId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(requisitionId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+requisitionId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                requisitionId = SequenceCommonActions.createRequisitionInStore(facilityStore,centralHub);

                newSequence = "";
                for(int i = 0;i<requisitionId.toCharArray().length;i++){
                    if(requisitionId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+requisitionId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = requisitionId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(requisitionId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+requisitionId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateFacilityToFacilityStoreOrganisationSequenceForRequisition() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Requisition Facility Store To Facility Store";
            String centralHub = "CENTRAL HUB 01- Central Hub";
            String facilityStore = "Pharmacy automation- Pharmacy";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,moduleName,"-","Organisation");
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                String requisitionId = SequenceCommonActions.createRequisitionInStore(facilityStore,facilityStore);
                String newSequence = "";

                for(int i = 0;i<requisitionId.toCharArray().length;i++){
                    if(requisitionId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+requisitionId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = requisitionId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(requisitionId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+requisitionId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                requisitionId = SequenceCommonActions.createRequisitionInStore(facilityStore,facilityStore);

                newSequence = "";
                for(int i = 0;i<requisitionId.toCharArray().length;i++){
                    if(requisitionId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+requisitionId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = requisitionId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(requisitionId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+requisitionId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-","Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateFacilityToFacilityStoreFacilitySequenceForRequisition() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Requisition Facility Store To Facility Store";
            String centralHub = "CENTRAL HUB 01- Central Hub";
            String facilityStore = "Pharmacy automation- Pharmacy";
            String property = "Facility";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault(moduleName,moduleName,"-",property);
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-",property);
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-",property);
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String advanceRefundId = SequenceCommonActions.createRequisitionInStore(facilityStore,facilityStore);
                String newSequence = "";


                for(int i = 0;i<advanceRefundId.toCharArray().length;i++){
                    if(advanceRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }



                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceRefundId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceRefundId);


                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-",property);

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-",property);
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                advanceRefundId = SequenceCommonActions.createRequisitionInStore(facilityStore,facilityStore);
                newSequence = "";

                for(int i = 0;i<advanceRefundId.toCharArray().length;i++){
                    if(advanceRefundId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceRefundId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceRefundId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceRefundId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceRefundId);

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-",property);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,moduleName,"-",property);
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleOrganisationSequenceForSalesOrderNumber() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Sales Order";
            String sModuleFieldName = "Order Number";
            String sDepartment = "Optical";
            String storeName = "OpticalStore- Optical";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validateSaleTransactionFunctionality(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validateSaleTransactionFunctionality(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleOrganisationSequenceForSalesOrderNumber() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Sales Order";
            String sModuleFieldName = "Order Number";
            String sDepartment = "Pharmacy";
            String storeName = "Pharmacy automation- Pharmacy";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validateSaleTransactionFunctionality(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validateSaleTransactionFunctionality(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleOrganisationSequenceForSON() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Son Transaction";
            String sModuleFieldName = "SON";
            String sDepartment = "Optical";
            String storeName = "OpticalStore- Optical";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleEntitySequenceForSON() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Son Transaction";
            String sModuleFieldName = "SON";
            String sDepartment = "Optical";
            String storeName = "OpticalStore- Optical";
            String properties = "Entity";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault(moduleName,sModuleFieldName,sDepartment,properties);
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validatingCreateSONTransaction(storeName);


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleOrganisationSequenceForSON() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Son Transaction";
            String sModuleFieldName = "SON";
            String sDepartment = "Pharmacy";
            String storeName = "Pharmacy automation- Pharmacy";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleOrganisationSequenceForSON() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Son Transaction";
            String sModuleFieldName = "SON";
            String sDepartment = "Central Hub";
            String storeName = "CENTRAL HUB 01- Central Hub";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOTStoreModuleOrganisationSequenceForSON() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Son Transaction";
            String sModuleFieldName = "SON";
            String sDepartment = "OT Store";
            String storeName = "OT Store- IPD";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMarketingModuleOrganisationSequenceForSON() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Son Transaction";
            String sModuleFieldName = "SON";
            String sDepartment = "Marketing";
            String storeName = "MarketingStore- Marketing";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateStationeryModuleOrganisationSequenceForSON() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Son Transaction";
            String sModuleFieldName = "SON";
            String sDepartment = "Stationery";
            String storeName = "StationeryStore- Stationery";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateHouseKeepingModuleOrganisationSequenceForSON() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Son Transaction";
            String sModuleFieldName = "SON";
            String sDepartment = "House Keeping";
            String storeName = "HouseKeepingStore- House Keeping";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMaintenanceModuleOrganisationSequenceForSON() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Son Transaction";
            String sModuleFieldName = "SON";
            String sDepartment = "Maintenance";
            String storeName = "MaintenanceStore- Maintenance";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralModuleOrganisationSequenceForSON() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Son Transaction";
            String sModuleFieldName = "SON";
            String sDepartment = "Central";
            String storeName = "CentralStore- Central";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingCreateSONTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleOrganisationSequenceForSRN() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Srn";
            String sModuleFieldName = "SRN";
            String sDepartment = "Optical";
            String storeName = "OpticalStore- Optical";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validateCreateSRNTransactionFunctionality(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validateCreateSRNTransactionFunctionality(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleOrganisationSequenceForAdjustment() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Adjustment";
            String sModuleFieldName = "Adjustment";
            String sDepartment = "Pharmacy";
            String storeName = "Pharmacy automation- Pharmacy";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleEntitySequenceForAdjustment() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Adjustment";
            String sModuleFieldName = "Adjustment";
            String sDepartment = "Pharmacy";
            String storeName = "Pharmacy automation- Pharmacy";
            String properties = "Entity";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault(moduleName,sModuleFieldName,sDepartment,properties);
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleFacilitySequenceForAdjustment() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Adjustment";
            String sModuleFieldName = "Adjustment";
            String sDepartment = "Pharmacy";
            String storeName = "Pharmacy automation- Pharmacy";
            String properties = "Facility";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault(moduleName,sModuleFieldName,sDepartment,properties);
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleOrganisationSequenceForAdjustment() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Adjustment";
            String sModuleFieldName = "Adjustment";
            String sDepartment = "Central Hub";
            String storeName = "CENTRAL HUB 01- Central Hub";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleFacilitySequenceForAdjustment() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Adjustment";
            String sModuleFieldName = "Adjustment";
            String sDepartment = "Central Hub";
            String storeName = "CENTRAL HUB 01- Central Hub";
            String properties = "Facility";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault(moduleName,sModuleFieldName,sDepartment,properties);
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                String deliveryId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOTStoreModuleOrganisationSequenceForAdjustment() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Adjustment";
            String sModuleFieldName = "Adjustment";
            String sDepartment = "OT Store";
            String storeName = "OT Store- IPD";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMarketingModuleOrganisationSequenceForAdjustment() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Adjustment";
            String sModuleFieldName = "Adjustment";
            String sDepartment = "Marketing";
            String storeName = "MarketingStore- Marketing";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateStationeryModuleOrganisationSequenceForAdjustment() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Adjustment";
            String sModuleFieldName = "Adjustment";
            String sDepartment = "Stationery";
            String storeName = "StationeryStore- Stationery";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateHouseKeepingModuleOrganisationSequenceForAdjustment() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Adjustment";
            String sModuleFieldName = "Adjustment";
            String sDepartment = "House Keeping";
            String storeName = "HouseKeepingStore- HouseKeeping";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMaintenanceModuleOrganisationSequenceForAdjustment() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Adjustment";
            String sModuleFieldName = "Adjustment";
            String sDepartment = "Maintenance";
            String storeName = "MaintenanceStore- Maintenance";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralModuleOrganisationSequenceForAdjustment() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Adjustment";
            String sModuleFieldName = "Adjustment";
            String sDepartment = "Central";
            String storeName = "CentralStore- Central";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubToCentralHubOrganisationSequenceForTransfer() {
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Direct Transfer Ch To Ch";
            String sModuleFieldName = "Central Hub to Central Hub";
            String sDepartment = "-";
            String storeName = "CENTRAL HUB 01- Central Hub";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                CommonActions.selectStoreOnApp(storeName);
                Cls_Generic_Methods.switchToOtherTab();
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_CommonElements.header_storePopup, 4);
                String advanceId = SequenceCommonActions.createDirectTransfer(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                CommonActions.selectStoreOnApp(storeName);
                Cls_Generic_Methods.switchToOtherTab();
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_CommonElements.header_storePopup, 4);
                advanceId = SequenceCommonActions.createDirectTransfer(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubToFacilityStoreOrganisationSequenceForTransfer() {
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);


        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Direct Transfer Ch To Fs";
            String sModuleFieldName = "Central Hub to Facility Store";
            String sDepartment = "-";
            String storeName = "CENTRAL HUB 01- Central Hub";
            String facilityStore = "OpticalStore- Optical";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                CommonActions.selectStoreOnApp(storeName);
                Cls_Generic_Methods.switchToOtherTab();
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_CommonElements.header_storePopup, 4);
                String advanceId = SequenceCommonActions.createDirectTransfer(facilityStore);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();

                CommonActions.selectStoreOnApp(storeName);
                Cls_Generic_Methods.switchToOtherTab();
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_CommonElements.header_storePopup, 4);
                advanceId = SequenceCommonActions.createDirectTransfer(facilityStore);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateFacilityStoreToCentralHubOrganisationSequenceForTransfer() {
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);


        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Direct Transfer Fs To Ch";
            String sModuleFieldName = "Facility Store to Central Hub";
            String sDepartment = "-";
            String storeName = "CENTRAL HUB 01- Central Hub";
            String facilityStore = "OpticalStore- Optical";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                CommonActions.selectStoreOnApp(facilityStore);
                Cls_Generic_Methods.switchToOtherTab();
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_CommonElements.header_storePopup, 4);
                String advanceId = SequenceCommonActions.createDirectTransfer(storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();

                CommonActions.selectStoreOnApp(facilityStore);
                Cls_Generic_Methods.switchToOtherTab();
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_CommonElements.header_storePopup, 4);
                advanceId = SequenceCommonActions.createDirectTransfer(storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateFacilityStoreToFacilityStoreOrganisationSequenceForTransfer() {
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);


        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Direct Transfer Fs To Fs";
            String sModuleFieldName = "Facility Store to Facility Store";
            String sDepartment = "-";
            String storeName = "CENTRAL HUB 01- Central Hub";
            String facilityStore = "OpticalStore- Optical";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                CommonActions.selectStoreOnApp(facilityStore);
                Cls_Generic_Methods.switchToOtherTab();
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_CommonElements.header_storePopup, 4);
                String advanceId = SequenceCommonActions.createDirectTransfer(facilityStore);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();

                CommonActions.selectStoreOnApp(facilityStore);
                Cls_Generic_Methods.switchToOtherTab();
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_CommonElements.header_storePopup, 4);
                advanceId = SequenceCommonActions.createDirectTransfer(facilityStore);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateFacilityStoreToFacilityStoreModuleFacilitySequenceForTransfer() {
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Direct Transfer Fs To Fs";
            String sModuleFieldName = "Facility Store to Facility Store";
            String sDepartment = "-";
            String storeName = "Pharmacy automation- Pharmacy";
            String properties = "Entity";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault(moduleName,sModuleFieldName,sDepartment,properties);
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                CommonActions.selectStoreOnApp(storeName);
                Cls_Generic_Methods.switchToOtherTab();
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_CommonElements.header_storePopup, 4);
                String deliveryId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                CommonActions.selectStoreOnApp(storeName);
                Cls_Generic_Methods.switchToOtherTab();
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_CommonElements.header_storePopup, 4);
                deliveryId = SequenceCommonActions.validatingAdjustmentTransaction(storeName);


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }


    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubToCentralHubOrganisationSequenceForIssue() {
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Issue Against Ch To Ch";
            String sModuleFieldName = "Central Hub to Central Hub";
            String sDepartment = "-";
            String storeName = "CENTRAL HUB 01- Central Hub";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.createIssueTransaction(storeName,storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.createIssueTransaction(storeName,storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubToFacilityStoreOrganisationSequenceForIssue() {
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);


        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Issue Against Ch To Fs";
            String sModuleFieldName = "Central Hub to Facility Store";
            String sDepartment = "-";
            String storeName = "CENTRAL HUB 01- Central Hub";
            String facilityStore = "OpticalStore- Optical";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.createIssueTransaction(storeName,facilityStore);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.createIssueTransaction(storeName,facilityStore);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateFacilityStoreToCentralHubOrganisationSequenceForIssue() {
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);


        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Issue Against Fs To Ch";
            String sModuleFieldName = "Facility Store to Central Hub";
            String sDepartment = "-";
            String storeName = "CENTRAL HUB 01- Central Hub";
            String facilityStore = "OpticalStore- Optical";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.createIssueTransaction(facilityStore,storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.createRequisitionInStoreForIssue(facilityStore,storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateFacilityStoreToFacilityStoreOrganisationSequenceForIssue() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Issue Against Fs To Fs";
            String sModuleFieldName = "Facility Store to Facility Store";
            String sDepartment = "-";
            String storeName = "Pharmacy automation- Pharmacy";
            String facilityStore = "OpticalStore- Optical";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.createRequisitionInStoreForIssue(facilityStore,storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.createRequisitionInStoreForIssue(facilityStore,storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateFacilityStoreToCentralHubStoreModuleFacilitySequenceForIssue() {
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Stock Issue Against Fs To Ch";
            String sModuleFieldName = "Facility Store to Central Hub";
            String sDepartment = "-";
            String storeName = "Pharmacy automation- Pharmacy";
            String centralStore ="CENTRAL HUB 01- Central Hub";
            String properties = "Facility";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault(moduleName,sModuleFieldName,sDepartment,properties);
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                String deliveryId = SequenceCommonActions.createIssueTransaction(storeName,centralStore);
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.createIssueTransaction(storeName,centralStore);


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleOrganisationSequenceForTaxInvoice() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Tax Invoice";
            String sModuleFieldName = "Tax Invoice";
            String sDepartment = "Optical";
            String storeName = "Pharmacy automation- Pharmacy";
            String facilityStore = "OpticalStore- Optical";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validateCreateTaxInvoice(facilityStore,facilityStore);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.validateCreateTaxInvoice(facilityStore,facilityStore);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleFacilitySequenceForTaxIssue() {
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Tax Invoice";
            String sModuleFieldName = "Tax Invoice";
            String sDepartment = "Optical";
            String storeName = "OpticalStore- Optical";
            String centralStore ="CENTRAL HUB 01- Central Hub";
            String properties = "Facility";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault(moduleName,sModuleFieldName,sDepartment,properties);
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                String deliveryId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOpticalModuleRegionSequenceForTaxIssue() {
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Tax Invoice";
            String sModuleFieldName = "Tax Invoice";
            String sDepartment = "Optical";
            String storeName = "OpticalStore- Optical";
            String centralStore ="CENTRAL HUB 01- Central Hub";
            String properties = "Region";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault(moduleName,sModuleFieldName,sDepartment,properties);
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                String deliveryId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleOrganisationSequenceForTaxInvoice() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Tax Invoice";
            String sModuleFieldName = "Tax Invoice";
            String sDepartment = "Pharmacy";
            String storeName = "Pharmacy automation- Pharmacy";
            String facilityStore = "OpticalStore- Optical";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validatePharmacyModuleEntitySequenceForTaxIssue() {
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Tax Invoice";
            String sModuleFieldName = "Tax Invoice";
            String sDepartment = "Pharmacy";
            String storeName = "Pharmacy automation- Pharmacy";
            String centralStore ="CENTRAL HUB 01- Central Hub";
            String properties = "Entity";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault(moduleName,sModuleFieldName,sDepartment,properties);
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                String deliveryId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleOrganisationSequenceForTaxInvoice() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Tax Invoice";
            String sModuleFieldName = "Tax Invoice";
            String sDepartment = "Central Hub";
            String storeName = "CENTRAL HUB 01- Central Hub";
            String facilityStore = "OpticalStore- Optical";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();

                advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralHubModuleFacilitySequenceForTaxIssue() {
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Tax Invoice";
            String sModuleFieldName = "Tax Invoice";
            String sDepartment = "Pharmacy";
            String storeName = "Pharmacy automation- Pharmacy";
            String centralStore ="CENTRAL HUB 01- Central Hub";
            String properties = "Facility";

            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                clickOnDefault(moduleName,sModuleFieldName,sDepartment,properties);
                Cls_Generic_Methods.customWait();
                CommonActions.selectFacility("TFS");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfTFSSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                CommonActions.selectFacility("TST");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                String deliveryId = SequenceCommonActions.validateCreateTaxInvoice(centralStore,centralStore);
                String newSequence = "";

                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);

                m_assert.assertTrue(existingSequenceNumber.get(indexOfFirstSequence+1).contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);

                deliveryId = SequenceCommonActions.validateCreateTaxInvoice(centralStore,centralStore);


                newSequence = "";
                for(int i = 0;i<deliveryId.toCharArray().length;i++){
                    if(deliveryId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+deliveryId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = deliveryId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(deliveryId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+deliveryId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);

                CommonActions.selectFacility("TFS");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,properties);
                m_assert.assertTrue(counterForExistingSequence.contains(existingSequenceNumber.get(indexOfTFSSequence)),
                        " Sequence is not updating for different Region correctly only in current Region "+counterForExistingSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateOTStoreModuleOrganisationSequenceForTaxIssue() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Tax Invoice";
            String sModuleFieldName = "Tax Invoice";
            String sDepartment = "OT Store";
            String storeName = "OT Store- IPD";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMarketingModuleOrganisationSequenceForTaxInvoice() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Tax Invoice";
            String sModuleFieldName = "Tax Invoice";
            String sDepartment = "Marketing";
            String storeName = "MarketingStore- Marketing";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateStationeryModuleOrganisationSequenceForTaxInvoice() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Tax Invoice";
            String sModuleFieldName = "Tax Invoice";
            String sDepartment = "Stationery";
            String storeName = "StationeryStore- Stationery";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateHouseKeepingModuleOrganisationSequenceForTaxInvoice() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Tax Invoice";
            String sModuleFieldName = "Tax Invoice";
            String sDepartment = "House Keeping";
            String storeName = "HouseKeepingStore- HouseKeeping";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateMaintenanceModuleOrganisationSequenceForTaxInvoice() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Tax Invoice";
            String sModuleFieldName = "Tax Invoice";
            String sDepartment = "Maintenance";
            String storeName = "MaintenanceStore- Maintenance";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateCentralModuleOrganisationSequenceForTaxInvoice() {

        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            CommonActions.selectFacility("TST");
            Cls_Generic_Methods.customWait();
            String moduleName = "Tax Invoice";
            String sModuleFieldName = "Tax Invoice";
            String sDepartment = "Central";
            String storeName = "CentralStore- Central";


            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(3);

                //Validate On Organisation Level
                boolean clicked = clickOnDefault(moduleName,sModuleFieldName,sDepartment,"Organisation");
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfFirstSequence = existingSequenceNumber.indexOf(counterForExistingSequence);
                Cls_Generic_Methods.customWait();

                String advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                String newSequence = "";

                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfFirstSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }

                updatedSequenceNumber.add(newSequence);

                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


                CommonActions.selectFacility("OPTHA1");
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait(5);
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                int indexOfSecondSequence = existingSequenceNumber.indexOf(counterForExistingSequence);


                Cls_Generic_Methods.customWait();
                advanceId = SequenceCommonActions.validateCreateTaxInvoice(storeName,storeName);
                Cls_Generic_Methods.customWait();


                newSequence = "";
                for(int i = 0;i<advanceId.toCharArray().length;i++){
                    if(advanceId.toCharArray()[i] == existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]){
                        newSequence = newSequence+advanceId.toCharArray()[i];
                    }else{
                        int lastCount = existingSequenceNumber.get(indexOfSecondSequence).toCharArray()[i]-'0';
                        int presentCount = advanceId.toCharArray()[i] -'0';
                        if(presentCount == lastCount+1){
                            m_assert.assertTrue("Counter is correctly increasing by one");
                        }
                        newSequence = newSequence+presentCount;
                    }

                }
                updatedSequenceNumber.add(newSequence);
                m_assert.assertTrue(advanceId.equalsIgnoreCase(newSequence),
                        " Advance Id Sequence Displayed correctly as its increasing by one counter "+advanceId);

                Cls_Generic_Methods.closeCurrentTabAndSwitchToOtherTab();
                Cls_Generic_Methods.customWait();
                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                getExistingSequenceNumberForCounter(moduleName,sModuleFieldName,sDepartment,"Organisation");
                m_assert.assertTrue(existingSequenceNumber.contains(newSequence),
                        " Sequence Update Correctly By One Counter In Sequence Page Setting Even after creation of Advance on facility level "+newSequence);


            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }

    @Test(enabled = true, description = "Validate Sequence Manager Page")
    public void validateDisableAndEnableSequenceManagerFunctionality() {


        try {
            String expectedLoggedInUser = oEHR_Data.user_PRAkashTest;
            CommonActions.loginFunctionality(expectedLoggedInUser);
            try {

                CommonActions.selectOptionUnderSettings(Settings_Data.option_ORGANISATION_SETTING);
                getRequiredFieldData("TESTING_FACILITY");
                CommonActions.selectOptionFromLeftInSettingsPanel("General", "Sequence Manager");
                Cls_Generic_Methods.customWait();
                boolean clickOnDisable = clickOnAction("Disable","Organisation");
                boolean clickOnEnable = clickOnAction("Disable","Organisation");
                m_assert.assertTrue(clickOnEnable,"Disable Functionality is working");
                boolean clickOnEdit = clickOnAction("Edit","Organisation");
                m_assert.assertTrue(clickOnEdit,"Enable Functionality is working");



            } catch (Exception e) {
                m_assert.assertFatal("Domain not created " + e);
                e.printStackTrace();
            }
        } catch (Exception e) {
            m_assert.assertFatal("Error loading the application " + e);
            e.printStackTrace();
        }
    }









    public static boolean searchByInSequenceManager(String searchInput,String searchBy){
        Page_SequenceManager oPage_SequenceManager = new Page_SequenceManager(driver);
        boolean searchedResultFound = false ;

        try{

            Cls_Generic_Methods.clearValuesInElement(oPage_SequenceManager.input_searchModuleInputBox);
            m_assert.assertTrue(Cls_Generic_Methods.sendKeysIntoElement(oPage_SequenceManager.input_searchModuleInputBox,searchInput),
                    " Search Value Entered as : "+searchInput);
            Cls_Generic_Methods.customWait();
            if(searchBy.equalsIgnoreCase("Module")){
                for(WebElement eModule :oPage_SequenceManager.list_sequenceTableModuleDataList ) {
                    String styleText = Cls_Generic_Methods.getElementAttribute(eModule,"style");
                    if(Cls_Generic_Methods.getTextInElement(eModule).equalsIgnoreCase(searchInput) && styleText.isEmpty())
                        m_assert.assertTrue(" Search By Module Name " + searchInput + " Working Correctly");
                    searchedResultFound = true;
                }
            }else if(searchBy.equalsIgnoreCase("Module Field")){
                for(WebElement eModule :oPage_SequenceManager.list_sequenceTableModuleFieldDataList ) {
                    String styleText = Cls_Generic_Methods.getElementAttribute(eModule,"style");
                    if(Cls_Generic_Methods.getTextInElement(eModule).equalsIgnoreCase(searchInput) && styleText.isEmpty())
                        m_assert.assertTrue(" Search By Module Field " + searchInput + " Working Correctly");
                    searchedResultFound = true;
                }
            }else if(searchBy.equalsIgnoreCase("Department")){
                   for(WebElement department : oPage_SequenceManager.list_sequenceTableRawDataList){
                       int index = oPage_SequenceManager.list_sequenceTableRawDataList.indexOf(department);
                       String departmentName = Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTableDepartmentList.get(index));
                       String styleText = Cls_Generic_Methods.getElementAttribute(department,"style");
                       if(styleText.isEmpty()) {
                           if (departmentName.equalsIgnoreCase(searchInput)) {
                               searchedResultFound = true;
                           } else {
                               searchedResultFound = false;
                           }
                       }
                   }
            }


        }catch (Exception e){
            e.printStackTrace();
        }
        return searchedResultFound;
    }

    public  boolean sortByInSequenceManager(String sortBy,String filterName){
        Page_SequenceManager oPage_SequenceManager = new Page_SequenceManager(driver);
        boolean searchedResultFound = false ;
        List<WebElement> filterList = null;

        try{

               if(sortBy.equalsIgnoreCase("Department")){
                   m_assert.assertTrue(Cls_Generic_Methods.selectElementByVisibleText(oPage_SequenceManager.select_departmentFilter,filterName),
                           filterName+" Name is Selected for "+sortBy);
                   Cls_Generic_Methods.customWait(3);
                   filterList = oPage_SequenceManager.list_sequenceTableDepartmentList;
               }else if(sortBy.equalsIgnoreCase("Counter Level")){
                   m_assert.assertTrue(Cls_Generic_Methods.selectElementByVisibleText(oPage_SequenceManager.select_counterFilter,filterName),
                           filterName+" Name is Selected for "+sortBy);
                   Cls_Generic_Methods.customWait(3);
                   filterList = oPage_SequenceManager.list_sequenceTablePropertiesList;
               }

            Cls_Generic_Methods.customWait();
            for(WebElement department : oPage_SequenceManager.list_sequenceTableRawDataList){
                int index = oPage_SequenceManager.list_sequenceTableRawDataList.indexOf(department);
                String departmentName = Cls_Generic_Methods.getTextInElement(filterList.get(index)).replace("\n"," ");
                String styleText = Cls_Generic_Methods.getElementAttribute(department,"style");
                if(styleText.isEmpty() || styleText.contains("display: table-row;")) {
                    if (departmentName.contains(filterName) || departmentName.contains("-")
                            || departmentFilter.contains(departmentName) || counterFilter.contains(departmentName.split(" ")[2])) {
                        searchedResultFound = true;
                    } else {
                        searchedResultFound = false;
                    }
                }
            }



        }catch (Exception e){
            e.printStackTrace();
        }
        return searchedResultFound;
    }

    public static void storeSelectOption(List<String> storedList,List<WebElement> selectList){

        try{
            for(WebElement eSelect :selectList ){
                String text = Cls_Generic_Methods.getTextInElement(eSelect);
                storedList.add(text);
            }

        }catch (Exception e){

        }

    }

    public void getRequiredFieldData(String facilityName){
        Page_IDPrefix oPage_IDPrefix = new Page_IDPrefix(driver);
        Page_OrganisationSetup oPage_OrganisationSetup = new Page_OrganisationSetup(driver);
        int indexOfEditButton = -1;
        int indexOfFacilityName = -1;


        try{
            organisationId = Cls_Generic_Methods.getElementAttribute(oPage_IDPrefix.input_idPrefixTextBox, "value");
            CommonActions.selectOptionFromLeftInSettingsPanel("General", "Organisation Setup");
            Cls_Generic_Methods.customWait();
            //Search facility
            Cls_Generic_Methods.scrollToTop();
            Cls_Generic_Methods.customWait();
            Cls_Generic_Methods.clickElement(oPage_OrganisationSetup.button_addFacility);
            Cls_Generic_Methods.customWait();
            Cls_Generic_Methods.clickElementByJS(driver, oPage_OrganisationSetup.input_searchFacility);
            Cls_Generic_Methods.sendKeysIntoElement(oPage_OrganisationSetup.input_searchFacility, facilityName);
            Cls_Generic_Methods.customWait(5);
            for (WebElement eFacilityName : oPage_OrganisationSetup.tableList_facilityName) {
                if (Cls_Generic_Methods.isElementDisplayed(eFacilityName)) {
                    String sFacilityName = Cls_Generic_Methods.getTextInElement(eFacilityName);
                    if (sFacilityName.contains(facilityName)) {
                        indexOfFacilityName = oPage_OrganisationSetup.tableList_facilityName.indexOf(eFacilityName);
                        m_assert.assertTrue(true, "Facility found to be search and edit <b> " + sFacilityName + " </b>");
                        break;
                    }
                }
            }

            if (indexOfFacilityName < 0) {
                m_assert.assertTrue(false, "<b>" + facilityName + " </b> not found in Facility by Search");
            } else {
                m_assert.assertTrue(true, "<b>" + facilityName + " </b> found in Facility by Search");
            }

            //Find the respected edit button and edit content
            for (WebElement btn_edit : oPage_OrganisationSetup.list_facilityEditButton) {
                if (Cls_Generic_Methods.isElementDisplayed(btn_edit)) {
                    indexOfEditButton = oPage_OrganisationSetup.list_facilityEditButton.indexOf(btn_edit);
                }

                if (indexOfFacilityName == indexOfEditButton) {
                    m_assert.assertTrue(Cls_Generic_Methods.clickElementByJS(driver, btn_edit), "<b> Facility edit </b> button clicked ");
                    Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_OrganisationSetup.input_facilityName, 5);
                    facilityCode = Cls_Generic_Methods.getElementAttribute(oPage_OrganisationSetup.input_facilityCode,"value");
                    String RegionCodeText = Cls_Generic_Methods.getTextInElement(oPage_OrganisationSetup.dropdown_facilityRegionSelected);
                    RegionCode = RegionCodeText.split(" - ")[1];
                    Cls_Generic_Methods.driverRefresh();
                    Cls_Generic_Methods.customWait(5);

                }
            }

        }catch (Exception e){
            e.printStackTrace();
        }
    }

    public boolean clickOnAction(String sActionToBePerformed,String sCounterLevel){
        Page_SequenceManager oPage_SequenceManager = new Page_SequenceManager(driver);
        boolean bActionClicked = false ;
        int indexOfProperties = 0;
        int indexOfAction = 0;
        try{
            for(WebElement eCounterType : oPage_SequenceManager.list_sequenceTablePropertiesList){
                String fullPropertiesText = Cls_Generic_Methods.getTextInElement(eCounterType);
                if(fullPropertiesText.contains(sCounterLevel));{
                    WebElement action = oPage_SequenceManager.list_sequenceTableActionList.get(indexOfAction);
                    List<WebElement> actionList = action.findElements(By.xpath("./a"));
                    for (WebElement eButton : actionList) {
                        if (Cls_Generic_Methods.isElementEnabled(eButton)) {
                            if (sActionToBePerformed.contains(Cls_Generic_Methods.getTextInElement(eButton))) {
                                bActionClicked = true;
                                m_assert.assertTrue(Cls_Generic_Methods.clickElement(eButton),
                                        sActionToBePerformed + " button clicked for " + sCounterLevel);

                                clickedRawData.add(Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTableModuleDataList.get(indexOfAction)));
                                clickedRawData.add(Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTableModuleFieldDataList.get(indexOfAction)));
                                clickedRawData.add(Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTableDepartmentList.get(indexOfAction)));
                                clickedRawData.add(Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTableFormateList.get(indexOfAction)));
                                clickedRawData.add(Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTableDefaultList.get(indexOfAction)));

                                break;
                            }
                        }
                    }


                }
                indexOfAction++;
            }



        }catch (Exception e){
            e.printStackTrace();
        }
        return bActionClicked ;
    }

    public boolean clickOnActionInEditSequence(String sActionToBePerformed,String sName){
        Page_SequenceManager oPage_SequenceManager = new Page_SequenceManager(driver);
        boolean bActionClicked = false ;
        int indexOfProperties = 0;
        int indexOfAction = 0;
        try{

            for(WebElement eName : oPage_SequenceManager.list_sequenceCreationTableDataListInEditSequence){
                String fullRawText = Cls_Generic_Methods.getTextInElement(eName);
                if(fullRawText.contains(sName)){
                    WebElement action = oPage_SequenceManager.list_sequenceCreationTableDataListInEditSequence.get(indexOfAction);
                    List<WebElement> actionList = action.findElements(By.xpath(".//button"));
                    for (WebElement eButton : actionList) {
                        if (Cls_Generic_Methods.isElementEnabled(eButton)) {
                            if (sActionToBePerformed.contains(Cls_Generic_Methods.getElementAttribute(eButton,"title"))) {
                                bActionClicked = true;
                                m_assert.assertTrue(Cls_Generic_Methods.clickElement(eButton),
                                        sActionToBePerformed + " button clicked for " + sName);
                                Cls_Generic_Methods.customWait(5);
                                break;
                            }else if (sActionToBePerformed.contains(Cls_Generic_Methods.getElementAttribute(eButton,"class"))){
                                bActionClicked = true;
                                m_assert.assertTrue(Cls_Generic_Methods.clickElement(eButton),
                                        sActionToBePerformed + " button clicked for " + sName);
                                break;
                            }

                            clickedRawDataInAddSequence.add(fullRawText);
                        }
                    }

                }
                indexOfAction++;
            }

        }catch (Exception e){
            e.printStackTrace();
        }
        return bActionClicked ;
    }

    public boolean getExistingSequenceNumberForCounter(String sModule,String sModuleField,String sDepartment,String sProperties){
        Page_SequenceManager oPage_SequenceManager = new Page_SequenceManager(driver);
        boolean bActionClicked = false ;
        boolean bAddButtonFound = false ;
        int noOfProperties = 0;
        List<String> propertiesList = new ArrayList<>();

        try{

            for(int i = 0 ; i<oPage_SequenceManager.list_sequenceTableRawDataList.size();i++ ){
                    String fullPropertiesText = Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTableRawDataList.get(i));
                    if (fullPropertiesText.contains(sModule) &&
                            fullPropertiesText.contains(sModuleField) &&
                            fullPropertiesText.contains(sDepartment)) {
                        for (int j = 1; j < 4; j++) {
                            String sNoOfPropertiesCheck = Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTableDepartmentList.get(j));
                            if (sNoOfPropertiesCheck.isEmpty()) {
                                noOfProperties++;
                            }
                        }

                        if (noOfProperties <= 2) {
                            for (int x = 0; x <= noOfProperties; x++) {
                                WebElement actionForProperties = oPage_SequenceManager.list_sequenceTableActionList.get(x);
                                propertiesList.add(Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTablePropertiesList.get(x)).replace("\n"," "));
                                List<WebElement> actionList = actionForProperties.findElements(By.xpath("./a"));
                                for (WebElement eButton : actionList) {
                                    if (Cls_Generic_Methods.isElementEnabled(eButton)) {
                                        if (Cls_Generic_Methods.getTextInElement(eButton).contains("Add")) {
                                            bAddButtonFound = true;
                                            break;
                                        }
                                    }
                                }

                            }
                            if (noOfProperties == 2) {
                                m_assert.assertTrue(!bAddButtonFound, " Add Button Is Not Displaying as all 3 sequence added");
                            } else {
                                m_assert.assertTrue(!bAddButtonFound, " Add Button Is Displaying as not all three sequence add only " + noOfProperties + " sequence added");
                            }

                        } else {
                            m_assert.assertFalse(" No of Sequence Of one Module is More Than Three for module " + sModule);
                        }

                            for (int x = 0; x <= noOfProperties; x++) {
                                if(propertiesList.get(x).contains(sProperties)) {
                                    existingSequenceNumber.add(Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTableFormateList.get(i)).trim());
                                    counterForExistingSequence = Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTableFormateList.get(i)).trim();
                                    bActionClicked = true;
                                    break;
                                }

                            }
                        if(bActionClicked){
                            break;
                        }


                    }

            }



        }catch (Exception e){
            e.printStackTrace();
        }
        return bActionClicked ;
    }

    public boolean clickOnDefault(String sModule,String sModuleField,String sDepartment,String sProperties){
        Page_SequenceManager oPage_SequenceManager = new Page_SequenceManager(driver);
        boolean bActionClicked = false ;
        List<String> propertiesList = new ArrayList<>();
        boolean bAddButtonFound = false ;
        int noOfProperties = 0;
        int indexOfModule = 0;
        int k= 0;

        try{

            for(int i = 0 ; i<oPage_SequenceManager.list_sequenceTableRawDataList.size();i++ ){
                    String fullPropertiesText = Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTableRawDataList.get(i));
                    if (fullPropertiesText.contains(sModule) &&
                            fullPropertiesText.contains(sModuleField) &&
                            fullPropertiesText.contains(sDepartment)) {
                        for (int j = 1; j < 4; j++) {
                            String sNoOfPropertiesCheck = Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTableDepartmentList.get(i+j));
                            if (sNoOfPropertiesCheck.isEmpty()) {
                                noOfProperties++;
                            }
                        }

                        if (noOfProperties <= 2) {
                            for (int x = 0; x <= noOfProperties; x++) {
                                propertiesList.add(Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTablePropertiesList.get(i+x)).replace("\n"," "));
                                WebElement actionForProperties = oPage_SequenceManager.list_sequenceTableActionList.get(i+x);
                                List<WebElement> actionList = actionForProperties.findElements(By.xpath("./a"));
                                for (WebElement eButton : actionList) {
                                    if (Cls_Generic_Methods.isElementEnabled(eButton)) {
                                        if (Cls_Generic_Methods.getTextInElement(eButton).contains("Add")) {
                                            bAddButtonFound = true;
                                            break;
                                        }
                                    }
                                }

                            }
                            if (noOfProperties == 2) {
                                m_assert.assertTrue(!bAddButtonFound, " Add Button Is Not Displaying as all 3 sequence added");
                            } else {
                                m_assert.assertTrue(bAddButtonFound, " Add Button Is Displaying as not all three sequence add only " + noOfProperties + " sequence added");
                            }

                        } else {
                            m_assert.assertFalse(" No of Sequence Of one Module is More Than Three for module " + sModule);
                        }


                            for (int x = 0; x <= noOfProperties; x++) {
                                int indexOfDefault = i+x;
                             if(Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTablePropertiesList.get(i+x)).replace("\n"," ").contains(sProperties)){
                                 if(!Cls_Generic_Methods.radioButtonIsSelected(oPage_SequenceManager.list_sequenceTableDefaultList.get(indexOfDefault))){
                                 m_assert.assertTrue(Cls_Generic_Methods.clickElement(oPage_SequenceManager.list_sequenceTableDefaultList.get(indexOfDefault)),
                                         " Default Radio Button Clicked for "+sProperties);
                                 Cls_Generic_Methods.customWait(3);
                                 Cls_Generic_Methods.clickElement(oPage_SequenceManager.button_makePrimaryButton);
                                 Cls_Generic_Methods.customWait(4);

                                 m_assert.assertTrue(Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTablePropertiesList.get(i+x-1)).contains("Primary"),
                                         "Selected Sequence Set as Primary");
                                 m_assert.assertTrue(Cls_Generic_Methods.getTextInElement(oPage_SequenceManager.list_sequenceTableDisableActionList.get(i+x-1)).contains("Disable"),
                                             "Selected Sequence Show as Disable Button Inactive");
                                     //m_assert.assertFalse(clickOnAction("Disable",sProperties),"Disable Button is Disable");
                                     bActionClicked = true;
                                   break;
                                 }
                                 else{
                                     bActionClicked = true;
                                     break;
                                 }

                             }

                            }
                            if(bActionClicked){
                                break;
                            }
                        indexOfModule = indexOfModule + noOfProperties;

                    }

            }



        }catch (Exception e){
            e.printStackTrace();
        }
        return bActionClicked ;
    }

    public void createPatientToValidatePatientInventoryFollow() {
        Page_NewPatientRegisteration oPage_NewPatientRegisteration = new Page_NewPatientRegisteration(driver);
        Page_OPD oPage_OPD = new Page_OPD(driver);
        Page_Navbar oPage_Navbar = new Page_Navbar(driver);



        try {
            myPatient = map_PatientsInExcel.get(patientKey);
            CommonActions.loginFunctionality(oEHR_Data.user_PRAkashTest);


            try {

                // Open the Search/Add patient dialog box
                try {
                    if (!oPage_NewPatientRegisteration.modalHeader_PatientRegForm.isDisplayed()) {
                        CommonActions.openPatientRegisterationAndAppointmentForm();
                    } else {
                        CommonActions.selectOptionFromListBasedOnTextOrValue(oPage_NewPatientRegisteration.tabs_PatientRegForm, "Patient Details");
                        Cls_Generic_Methods.customWait();
                    }
                } catch (NoSuchElementException e1) {
                    CommonActions.openPatientRegisterationAndAppointmentForm();
                }

                // Entering Essential Form Data
                if (!myPatient.getsSALUTATION().isEmpty()) {
                    m_assert.assertTrue(Cls_Generic_Methods.selectElementByVisibleText(oPage_NewPatientRegisteration.select_salutationForPatient, myPatient.getsSALUTATION()), "Salutation for Patient is selected as - " + myPatient.getsSALUTATION());
                }

                m_assert.assertTrue(Cls_Generic_Methods.sendKeysIntoElement(oPage_NewPatientRegisteration.input_firstNameOnPatientRegForm, myPatient.getsFIRST_NAME()), "First Name is entered as - " + myPatient.getsFIRST_NAME());
                m_assert.assertTrue(Cls_Generic_Methods.sendKeysIntoElement(oPage_NewPatientRegisteration.input_mobileNumberOnPatientRegForm, myPatient.getsMOBILE_NUMBER()), "Mobile Number is entered as - " + myPatient.getsMOBILE_NUMBER());


                m_assert.assertTrue(Cls_Generic_Methods.clickElementByJS(driver, oPage_NewPatientRegisteration.button_createAppointmentPatientRegForm), "Validate that Create Appointment button is clicked");

                Cls_Generic_Methods.customWait(15);
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_Navbar.logo_FF_EHS, 20);
                String concatPatientFullName = CommonActions.getFullPatientName(myPatient).toUpperCase().trim();
                boolean patientSelectedOPD = CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);
                m_assert.assertTrue(patientSelectedOPD, " Patient Created Successfully In OPD");


            } catch (Exception e) {
                e.printStackTrace();
                m_assert.assertFatal("" + e);
            }
        } catch (Exception e) {
            e.printStackTrace();
            m_assert.assertFatal("" + e);
        }

    }

    public void scheduleAdmissionFromOPD() throws Exception {

        Page_OPD oPage_OPD = new Page_OPD(driver);
        Page_ScheduleAdmission oPage_ScheduleAdmission = new Page_ScheduleAdmission(driver);
        Page_PatientAppointmentDetails oPage_PatientAppointmentDetails = new Page_PatientAppointmentDetails(driver);
        myPatient = TestBase.map_PatientsInExcel.get(patientKey);
        oEHR_Data = new EHR_Data();
        Page_IPD oPage_IPD  = new Page_IPD(driver);
        Page_CommonElements oPage_CommonElements = new Page_CommonElements(driver);
        Page_AdmissionInPreOperative oPage_AdmissionInPreOperative = new Page_AdmissionInPreOperative(driver);


        String concatPatientFullName = "";
        boolean bPatientNameFound = false;
        String expectedLoggedInUser = "PR.Akash test";

        try {
            CommonActions.loginFunctionality(expectedLoggedInUser);

            try {
                String MyQueueTab = "My Queue";
                concatPatientFullName = CommonActions.getFullPatientName(myPatient);
                concatPatientFullName = concatPatientFullName.toUpperCase().trim();
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_OPD.tabs_appointmentTabsOnHomepage.get(0), 10);
                m_assert.assertTrue(
                        CommonActions.selectTabOnDepartmentPage(oPage_OPD.tabs_appointmentTabsOnHomepage, MyQueueTab),
                        "Validate " + MyQueueTab + " tab is selected");
                Thread.sleep(1000);
                bPatientNameFound = CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);

            } catch (Exception e) {
                e.printStackTrace();
                m_assert.assertFatal("Exception while getting patient" + e);
            }
            if (bPatientNameFound) {

                CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_PatientAppointmentDetails.img_patientProfilePicOnPatientDetailsSection, 20);

                m_assert.assertTrue(Cls_Generic_Methods.scrollToElementByAction(driver, oPage_PatientAppointmentDetails.button_scheduleAdmission),
                        "Scheduled admission button is displayed");
                m_assert.assertTrue(Cls_Generic_Methods.clickElement(driver, oPage_PatientAppointmentDetails.button_scheduleAdmission),
                        "Clicked on scheduled admission button");

                //Fill Schedule Admission Form
                m_assert.assertTrue(Cls_Generic_Methods.waitForElementToBecomeVisible(oPage_ScheduleAdmission.header_ScheduleAdmissionForm, 20),
                        "Scheduled admission form is displayed");

                m_assert.assertEquals(Cls_Generic_Methods.getTextInElement(oPage_ScheduleAdmission.tab_activeScheduleAdmissionForm),"Admission Details","Admission Details Tab is selected on start by default.");

                //Admission Type Button Clickable validation
                for (WebElement radioAdmissionBtn : oPage_ScheduleAdmission.list_radioAdmissionType) {
                    String admissionTypeBtn = Cls_Generic_Methods.getTextInElement(radioAdmissionBtn);
                    if (admissionTypeBtn.equalsIgnoreCase("Same Day")) {
                        m_assert.assertTrue(Cls_Generic_Methods.clickElementByJS(driver, radioAdmissionBtn), admissionTypeBtn + " Button in Admission Type is Clickable");
                        break;
                    }
                }

                Cls_Generic_Methods.clickElement(oPage_ScheduleAdmission.button_viewCaseDetails);
                Cls_Generic_Methods.customWait();
                //Create Admission
                m_assert.assertTrue(Cls_Generic_Methods.clickElement(driver, oPage_ScheduleAdmission.button_createAdmission),
                        "Create admission button is clicked");

                Cls_Generic_Methods.customWait(5);

                //Assign Bed
                m_assert.assertTrue(Cls_Generic_Methods.waitForElementToBecomeVisible(oPage_ScheduleAdmission.header_assignBed, 15),
                        "Assigned bed Form is displayed");

                try {
                    if (Cls_Generic_Methods.isElementDisplayed(oPage_ScheduleAdmission.header_assignBed)) {
                        m_assert.assertTrue(Cls_Generic_Methods.clickElement(driver, oPage_ScheduleAdmission.input_selectWard),
                                "Ward dropdown Clicked");
                        m_assert.assertTrue(Cls_Generic_Methods.selectElementByIndex(oPage_ScheduleAdmission.input_selectWard, 1),
                                "Ward Value Selected");
                        Cls_Generic_Methods.customWait(2);
                        m_assert.assertTrue(Cls_Generic_Methods.clickElement(driver, oPage_ScheduleAdmission.input_selectRoom),
                                "SelectRoom dropdown Clicked");
                        m_assert.assertTrue(Cls_Generic_Methods.selectElementByIndex(oPage_ScheduleAdmission.input_selectRoom, 1),
                                "SelectRoom value Selected");
                        Cls_Generic_Methods.customWait(1);
                        m_assert.assertTrue(Cls_Generic_Methods.clickElement(driver, oPage_ScheduleAdmission.button_saveBed),
                                "Clicked on Save bed");
                        Cls_Generic_Methods.waitForElementToBecomeVisible(oPage_PatientAppointmentDetails.img_patientProfilePicOnPatientDetailsSection, 10);

                    } else {
                        m_assert.assertTrue(false, "Assign Bed Form Not displayed. ");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    m_assert.assertFatal("Unable to Select Room and assign Bed" + e);
                }

                Cls_Generic_Methods.customWait(3);
                CommonActions.selectDepartmentOnApp("OPD");

                Cls_Generic_Methods.customWait(5);
                CommonActions.selectPatientNameInOpd(oPage_OPD.rows_patientAppointments, concatPatientFullName);
                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_PatientAppointmentDetails.button_jumpToAdmissionForSingleAdmission,
                        30);

                Cls_Generic_Methods.scrollToElementByJS(oPage_PatientAppointmentDetails.button_jumpToAdmissionForSingleAdmission);
                Cls_Generic_Methods.customWait(2);
                Cls_Generic_Methods.clickElement(oPage_PatientAppointmentDetails.button_jumpToAdmissionForSingleAdmission);
                Cls_Generic_Methods.customWait(10);
                Cls_Generic_Methods.waitForElementToBecomeVisible(oPage_IPD.button_readyForAdmission,16);

                m_assert.assertTrue(Cls_Generic_Methods.clickElement(driver, oPage_IPD.button_readyForAdmission),
                        "Ready for admission Button clicked ");

                Cls_Generic_Methods.customWait(15);
				/*m_assert.assertTrue(Cls_Generic_Methods.waitForElementToBecomeVisible(oPage_IPD.button_admitPatient, 20),
						"Admit Patient Button visible");*/
                m_assert.assertTrue(Cls_Generic_Methods.clickElement(driver, oPage_IPD.button_admitPatient),
                        "Admit Patient Button clicked and visible ");

                m_assert.assertTrue(Cls_Generic_Methods.waitForElementToBecomeVisible(oPage_IPD.header_admissionForm, 20),
                        "Admission form is displayed");
                m_assert.assertTrue(Cls_Generic_Methods.clickElement(driver, oPage_IPD.button_saveAdmissionForm),
                        "Admission Form Saved. ");
                Cls_Generic_Methods.customWait(15);
                Cls_Generic_Methods.clickElement(oPage_AdmissionInPreOperative.button_admissionInPreOperative);

                Cls_Generic_Methods.waitForElementToBeDisplayed(oPage_AdmissionInPreOperative.tab_AdminTabOnAdmissionUnderPreOperative, 16);

                m_assert.assertTrue(Cls_Generic_Methods.clickElement(oPage_AdmissionInPreOperative.button_saveOnModalHeader),
                        "Validate Save button is clicked on Admission under Pre-Operative");
                Cls_Generic_Methods.customWait(10);
                Cls_Generic_Methods.clickElement(oPage_CommonElements.button_CloseTemplate);
                Cls_Generic_Methods.customWait(2);


            } else {
                m_assert.assertTrue(false, "searched patient is not present in patient list");
            }
        } catch (Exception e) {
            e.printStackTrace();
            m_assert.assertFatal("Application not loaded in the browser" + e);
        }

    }




}
